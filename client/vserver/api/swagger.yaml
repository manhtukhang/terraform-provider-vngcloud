---
swagger: "2.0"
info:
  description: "Api Documentation"
  version: "1.0.2"
  title: "Api Documentation"
  termsOfService: "urn:tos"
  contact: {}
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0"
host: "virtserver.swaggerhub.com"
basePath: "/manhtu1997/vserver/1.0.2"
tags:
- name: "attachment-controller"
  description: "Attachment Controller"
- name: "bandwidth-controller"
  description: "Bandwidth Controller"
- name: "elastic-ip-rest-controller-v-2"
  description: "Elastic Ip Rest Controller V 2"
- name: "flavor-rest-controller"
  description: "Flavor Rest Controller"
- name: "flavor-zone-rest-controller"
  description: "Flavor Zone Rest Controller"
- name: "image-rest-controller"
  description: "Image Rest Controller"
- name: "k-8-s-cluster-rest-controller-v-2"
  description: "K 8 S Cluster Rest Controller V 2"
- name: "load-balancer-rest-controller"
  description: "Load Balancer Rest Controller"
- name: "network-acl-rest-controller"
  description: "Network Acl Rest Controller"
- name: "network-interface-elastic-rest-controller-v-2"
  description: "Network Interface Elastic Rest Controller V 2"
- name: "network-rest-controller"
  description: "Network Rest Controller"
- name: "network-rest-controller-v-2"
  description: "Network Rest Controller V 2"
- name: "project-rest-controller"
  description: "Project Rest Controller"
- name: "protocol-rest-controller-v-2"
  description: "Protocol Rest Controller V 2"
- name: "quota-rest-controller"
  description: "Quota Rest Controller"
- name: "quota-rest-controller-v-2"
  description: "Quota Rest Controller V 2"
- name: "route-table-controller"
  description: "Route Table Controller"
- name: "secgroup-rest-controller"
  description: "Secgroup Rest Controller"
- name: "secgroup-rest-controller-v-2"
  description: "Secgroup Rest Controller V 2"
- name: "secgroup-rule-rest-controller"
  description: "Secgroup Rule Rest Controller"
- name: "secgroup-rule-rest-controller-v-2"
  description: "Secgroup Rule Rest Controller V 2"
- name: "server-group-rest-controller"
  description: "Server Group Rest Controller"
- name: "server-group-rest-controller-v-2"
  description: "Server Group Rest Controller V 2"
- name: "server-rest-controller"
  description: "Server Rest Controller"
- name: "server-rest-controller-v-2"
  description: "Server Rest Controller V 2"
- name: "simple-server-rest-controller"
  description: "Simple Server Rest Controller"
- name: "simple-volume-rest-controller"
  description: "Simple Volume Rest Controller"
- name: "ssh-key-rest-controller"
  description: "SSH Key Rest Controller"
- name: "ssh-key-rest-controller-v-2"
  description: "SSH Key Rest Controller V 2"
- name: "subnet-rest-controller"
  description: "Subnet Rest Controller"
- name: "subnet-rest-controller-v-2"
  description: "Subnet Rest Controller V 2"
- name: "user-image-rest-controller-v-2"
  description: "User Image Rest Controller V 2"
- name: "virtual-ip-address-rest-controller-v-2"
  description: "Virtual Ip Address Rest Controller V 2"
- name: "volume-rest-controller"
  description: "Volume Rest Controller"
- name: "volume-rest-controller-v-2"
  description: "Volume Rest Controller V 2"
- name: "volume-type-rest-controller"
  description: "Volume Type Rest Controller"
- name: "volume-type-zone-rest-controller"
  description: "Volume Type Zone Rest Controller"
- name: "vpc-external-callback-controller"
  description: "VPC External Callback Controller"
- name: "wan-ip-rest-controller-v-2"
  description: "Wan Ip Rest Controller V 2"
schemes:
- "https"
paths:
  /v1/projects:
    get:
      tags:
      - "project-rest-controller"
      summary: "listProject"
      operationId: "listProjectUsingGET"
      produces:
      - "*/*"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "project-rest-controller"
      summary: "createProject"
      operationId: "createProjectUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/projects/{project_id}:
    get:
      tags:
      - "project-rest-controller"
      summary: "getProject"
      operationId: "getProjectUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ProjectResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/bandwidth:
    get:
      tags:
      - "bandwidth-controller"
      summary: "List Bandwidths"
      operationId: "listBandwidthsUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BandwidthResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "bandwidth-controller"
      summary: "Create bandwidth"
      operationId: "createBandwidthUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createBandwidthRequest"
        description: "createBandwidthRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateBandwidthRequest"
        x-exportParamName: "CreateBandwidthRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BandwidthResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "bandwidth-controller"
      summary: "Delete bandwidth"
      operationId: "deleteBandwidthUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteBandwidthRequest"
        description: "deleteBandwidthRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteBandwidthRequest"
        x-exportParamName: "DeleteBandwidthRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/bandwidth/IP:
    get:
      tags:
      - "bandwidth-controller"
      summary: "List resource IPs"
      operationId: "listResourceIpsUsingGET"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "listResourceIpRequest"
        description: "listResourceIpRequest"
        required: true
        schema:
          $ref: "#/definitions/ListResourceIpRequest"
        x-exportParamName: "ListResourceIpRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BandwidthResourceIpResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/bandwidth/change-type:
    put:
      tags:
      - "bandwidth-controller"
      summary: "Change type bandwidth"
      operationId: "changeTypeBandwidthUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "changeTypeBandwidthRequest"
        description: "changeTypeBandwidthRequest"
        required: true
        schema:
          $ref: "#/definitions/ChangeTypeBandwidthRequest"
        x-exportParamName: "ChangeTypeBandwidthRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BandwidthResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/bandwidth/packages:
    get:
      tags:
      - "bandwidth-controller"
      summary: "List Bandwidth Packages"
      operationId: "listPackagesUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BandwidthPackageResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/bandwidth/recover:
    put:
      tags:
      - "bandwidth-controller"
      summary: "Recover bandwidth"
      operationId: "recoverBandwidthUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "recoverBandwidthRequest"
        description: "recoverBandwidthRequest"
        required: true
        schema:
          $ref: "#/definitions/RecoverBandwidthRequest"
        x-exportParamName: "RecoverBandwidthRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BandwidthResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/bandwidth/renew:
    put:
      tags:
      - "bandwidth-controller"
      summary: "Renew bandwidth"
      operationId: "renewBandwidthUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "renewBandwidthRequest"
        description: "renewBandwidthRequest"
        required: true
        schema:
          $ref: "#/definitions/RenewBandwidthRequest"
        x-exportParamName: "RenewBandwidthRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/bandwidth/traffic:
    get:
      tags:
      - "bandwidth-controller"
      summary: "List all traffic"
      operationId: "listAllTrafficUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BandwidthTrafficResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/bandwidth/{uuid}:
    get:
      tags:
      - "bandwidth-controller"
      summary: "Get Bandwidth"
      operationId: "getBandwidthUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "uuid"
        in: "path"
        description: "The bandwidth id"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BandwidthResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavor_zones/codes:
    get:
      tags:
      - "flavor-zone-rest-controller"
      summary: "listCode"
      operationId: "listCodeUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Code"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavor_zones/customs:
    get:
      tags:
      - "flavor-zone-rest-controller"
      summary: "listCustom"
      operationId: "listCustomUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/FlavorZone"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavor_zones/families:
    get:
      tags:
      - "flavor-zone-rest-controller"
      summary: "listFamily"
      operationId: "listFamilyUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Family"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavor_zones/product:
    get:
      tags:
      - "flavor-zone-rest-controller"
      summary: "listFlavorZone"
      operationId: "listFlavorZoneUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FlavorZoneResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavor_zones/product/{product}:
    get:
      tags:
      - "flavor-zone-rest-controller"
      summary: "listFlavorZone"
      operationId: "listFlavorZoneUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "product"
        in: "path"
        description: "product"
        required: true
        type: "string"
        x-exportParamName: "Product"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FlavorZoneResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavor_zones/{flavor_zone_id}:
    get:
      tags:
      - "flavor-zone-rest-controller"
      summary: "getFlavorZone"
      operationId: "getFlavorZoneUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "flavor_zone_id"
        in: "path"
        description: "flavor_zone_id"
        required: true
        type: "string"
        x-exportParamName: "FlavorZoneId"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FlavorZoneResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavors/customs:
    get:
      tags:
      - "flavor-rest-controller"
      summary: "List flavor custom for project"
      operationId: "listFlavorCustomUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Flavor"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavors/families/{familyKey}/platforms/{platformKey}:
    get:
      tags:
      - "flavor-rest-controller"
      summary: "List flavor custom for project"
      operationId: "listFlavorByFamilyAndPlatformUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "familyKey"
        in: "path"
        description: "The family key"
        required: true
        type: "string"
        x-exportParamName: "FamilyKey"
      - name: "platformKey"
        in: "path"
        description: "The platform key"
        required: true
        type: "string"
        x-exportParamName: "PlatformKey"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Flavor"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavors/simple-servers:
    get:
      tags:
      - "flavor-rest-controller"
      summary: "List flavor for simple server"
      operationId: "listFlavorForSimpleServerUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FlavorResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/flavors/{flavor_id}:
    get:
      tags:
      - "flavor-rest-controller"
      summary: "getFlavor"
      operationId: "getFlavorUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "flavor_id"
        in: "path"
        description: "flavor_id"
        required: true
        type: "string"
        x-exportParamName: "FlavorId"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FlavorResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/health-monitors/{health_monitor_id}:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "getHealthMonitor"
      operationId: "getHealthMonitorUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "health_monitor_id"
        in: "path"
        description: "health monitor id"
        required: true
        type: "string"
        x-exportParamName: "HealthMonitorId"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«HealthMonitor»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/images/gpu:
    get:
      tags:
      - "image-rest-controller"
      summary: "listGPUImage"
      operationId: "listGPUImageUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OSImageBaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/images/os:
    get:
      tags:
      - "image-rest-controller"
      summary: "listOSImage"
      operationId: "listOSImageUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/OSImageBaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/images/os_default:
    get:
      tags:
      - "image-rest-controller"
      summary: "listOSImageDefault"
      operationId: "listOSImageDefaultUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/l7-policies:
    post:
      tags:
      - "load-balancer-rest-controller"
      summary: "Create a l7 policy"
      operationId: "createPolicyUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createL7PolicyRequest"
        description: "createL7PolicyRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateL7PolicyRequest"
        x-exportParamName: "CreateL7PolicyRequest"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«L7Policy»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "load-balancer-rest-controller"
      summary: "Update a policy"
      operationId: "updateAPolicyUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateL7PolicyRequest"
        description: "updateL7PolicyRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateL7PolicyRequest"
        x-exportParamName: "UpdateL7PolicyRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "load-balancer-rest-controller"
      summary: "Delete a policy"
      operationId: "deletePolicyUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteL7PolicyRequest"
        description: "deleteL7PolicyRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteL7PolicyRequest"
        x-exportParamName: "DeleteL7PolicyRequest"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/listeners:
    post:
      tags:
      - "load-balancer-rest-controller"
      summary: "Create a listener"
      operationId: "createListenerUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createListenerRequest"
        description: "createListenerRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateListenerRequest"
        x-exportParamName: "CreateListenerRequest"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«Listener»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "load-balancer-rest-controller"
      summary: "Update a listener"
      operationId: "updateListenerUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateListenerRequest"
        description: "updateListenerRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateListenerRequest"
        x-exportParamName: "UpdateListenerRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "load-balancer-rest-controller"
      summary: "Delete a listener"
      operationId: "deleteListenerUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteListenerRequest"
        description: "deleteListenerRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteListenerRequest"
        x-exportParamName: "DeleteListenerRequest"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/listeners/{listener_id}:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get a specific listener"
      operationId: "getListenerUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "listener_id"
        in: "path"
        description: "listener id"
        required: true
        type: "string"
        x-exportParamName: "ListenerId"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«Listener»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/listeners/{listener_id}/l7policies:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get list policies of a listener"
      operationId: "getL7PoliciesUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "listener_id"
        in: "path"
        description: "listener id"
        required: true
        type: "string"
        x-exportParamName: "ListenerId"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "string"
        x-exportParamName: "Size"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«L7Policy»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/load-balancers:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get list of load balancers"
      operationId: "getListLoadBalancersUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "string"
        x-exportParamName: "Size"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«LoadBalancer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "load-balancer-rest-controller"
      summary: "Create a new load balancer"
      operationId: "createLoadBalancerUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createLoadBalancerRequest"
        description: "createLoadBalancerRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateLoadBalancerRequest"
        x-exportParamName: "CreateLoadBalancerRequest"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«LoadBalancer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "load-balancer-rest-controller"
      summary: "Delete a load balancer"
      operationId: "deleteLoadBalancerUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteLoadBalancerRequest"
        description: "deleteLoadBalancerRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteLoadBalancerRequest"
        x-exportParamName: "DeleteLoadBalancerRequest"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/load-balancers/headers:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get list headers"
      operationId: "getHeadersUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«string»»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/load-balancers/packages:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get list packages"
      operationId: "getPackagesUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«LoadBalancerPackage»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/load-balancers/{load_balancer_id}:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get a specific load balancer"
      operationId: "getLoadBalancerUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "load_balancer_id"
        in: "path"
        description: "load balancer id"
        required: true
        type: "string"
        x-exportParamName: "LoadBalancerId"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«LoadBalancer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/load-balancers/{load_balancer_id}/listeners:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get list of listeners of a load balancer"
      operationId: "getListListenersUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "load_balancer_id"
        in: "path"
        description: "load balancer id"
        required: true
        type: "string"
        x-exportParamName: "LoadBalancerId"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "string"
        x-exportParamName: "Size"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«Listener»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/load-balancers/{load_balancer_id}/pools:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get list of pools of a load balancer"
      operationId: "getListPoolsUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "load_balancer_id"
        in: "path"
        description: "load balancer id"
        required: true
        type: "string"
        x-exportParamName: "LoadBalancerId"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "string"
        x-exportParamName: "Size"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«Pool»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/multiVolumeAttachment/server/{server_uuid}:
    get:
      tags:
      - "attachment-controller"
      summary: "Get list attached instance of server "
      operationId: "listAttachmentByServerUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "server_uuid"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerUuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AttachmentResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/multiVolumeAttachment/{uuid}:
    get:
      tags:
      - "attachment-controller"
      summary: "Get list attached instance of multi attach volume"
      operationId: "listAttachmentUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "uuid"
        in: "path"
        description: "The volume id"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/AttachmentResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/networks:
    get:
      tags:
      - "network-rest-controller"
      summary: "listNetwork"
      operationId: "listNetworkUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "network-rest-controller"
      summary: "createNetwork"
      operationId: "createNetworkUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createNetworkRequest"
        description: "createNetworkRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateNetworkRequest"
        x-exportParamName: "CreateNetworkRequest"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "network-rest-controller"
      summary: "editNetwork"
      operationId: "editNetworkUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateNetworkRequest"
        description: "updateNetworkRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateNetworkRequest"
        x-exportParamName: "UpdateNetworkRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "network-rest-controller"
      summary: "deleteNetwork"
      operationId: "deleteNetworkUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteNetworkRequest"
        description: "deleteNetworkRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteNetworkRequest"
        x-exportParamName: "DeleteNetworkRequest"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/networks/{network_id}:
    get:
      tags:
      - "network-rest-controller"
      summary: "getNetwork"
      operationId: "getNetworkUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "network_id"
        in: "path"
        description: "network_id"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/policies:
    get:
      tags:
      - "network-acl-rest-controller"
      summary: "List network-acl"
      operationId: "listNetworkAclUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkAclListResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "network-acl-rest-controller"
      summary: "Create network-acl"
      operationId: "createNetworkAclUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createNetworkAclRequest"
        description: "createNetworkAclRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateNetworkAclRequest"
        x-exportParamName: "CreateNetworkAclRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkAclResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/policies/{uuid}:
    get:
      tags:
      - "network-acl-rest-controller"
      summary: "Get network-acl by uuid"
      operationId: "getNetworkAclUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "uuid"
        in: "path"
        description: "The network-acl uuid"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkAclResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "network-acl-rest-controller"
      summary: "Delete Network-acl"
      operationId: "deleteNetworkAclUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "uuid"
        in: "path"
        description: "The network-acl uuid"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/policies/{uuid}/rules:
    put:
      tags:
      - "network-acl-rest-controller"
      summary: "Update Inbound/Outbound Rules of Network-acl"
      operationId: "updateRulesUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateAclRulesRequest"
        description: "updateAclRulesRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateNetworkAclRulesRequest"
        x-exportParamName: "UpdateAclRulesRequest"
      - name: "uuid"
        in: "path"
        description: "The network-acl uuid"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkAclResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/policies/{uuid}/subnets:
    put:
      tags:
      - "network-acl-rest-controller"
      summary: "Update ACL Rule of Network-acl"
      operationId: "updateAssociatedSubnetsUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateSubnetsRequest"
        description: "updateSubnetsRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateNetworkAclSubnetsRequest"
        x-exportParamName: "UpdateSubnetsRequest"
      - name: "uuid"
        in: "path"
        description: "The network-acl uuid"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkAclResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/pools:
    post:
      tags:
      - "load-balancer-rest-controller"
      summary: "Create a new pool"
      operationId: "createPoolUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createPoolRequest"
        description: "createPoolRequest"
        required: true
        schema:
          $ref: "#/definitions/CreatePoolRequest"
        x-exportParamName: "CreatePoolRequest"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«Pool»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "load-balancer-rest-controller"
      summary: "Update a pool"
      operationId: "updatePoolUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updatePoolRequest"
        description: "updatePoolRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdatePoolRequest"
        x-exportParamName: "UpdatePoolRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "load-balancer-rest-controller"
      summary: "Delete a pool"
      operationId: "deletePoolUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deletePoolRequest"
        description: "deletePoolRequest"
        required: true
        schema:
          $ref: "#/definitions/DeletePoolRequest"
        x-exportParamName: "DeletePoolRequest"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/pools/{pool_id}:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get a specific pool"
      operationId: "getPoolUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "pool_id"
        in: "path"
        description: "pool id"
        required: true
        type: "string"
        x-exportParamName: "PoolId"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«Pool»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/pools/{pool_id}/health-monitors:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get the health monitor associated with a specific pool"
      operationId: "getHealthMonitorFromPoolUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "pool_id"
        in: "path"
        description: "pool id"
        required: true
        type: "string"
        x-exportParamName: "PoolId"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«HealthMonitor»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/pools/{pool_id}/members:
    get:
      tags:
      - "load-balancer-rest-controller"
      summary: "Get members from a pool"
      operationId: "getMemberFromPoolUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "string"
        x-exportParamName: "Page"
        x-optionalDataType: "String"
      - name: "pool_id"
        in: "path"
        description: "pool id"
        required: true
        type: "string"
        x-exportParamName: "PoolId"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "string"
        x-exportParamName: "Size"
        x-optionalDataType: "String"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«Member»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "load-balancer-rest-controller"
      summary: "Update members"
      operationId: "updateMembersUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "pool_id"
        in: "path"
        description: "pool id"
        required: true
        type: "string"
        x-exportParamName: "PoolId"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateMembersRequest"
        description: "updateMembersRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateMembersRequest"
        x-exportParamName: "UpdateMembersRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/quota:
    get:
      tags:
      - "quota-rest-controller"
      summary: "list"
      operationId: "listUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/InterfaceProjectQuotaResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/quota-used:
    get:
      tags:
      - "quota-rest-controller"
      summary: "listQuotaUsed"
      operationId: "listQuotaUsedUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/QuotaResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/quota/user/{user_id}:
    get:
      tags:
      - "quota-rest-controller"
      summary: "listByUser"
      operationId: "listByUserUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "user_id"
        in: "path"
        description: "user_id"
        required: true
        type: "integer"
        format: "int32"
        x-exportParamName: "UserId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/InterfaceProjectQuotaResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/reorder-l7-policies:
    put:
      tags:
      - "load-balancer-rest-controller"
      summary: "Reorder the L7 policies"
      operationId: "reorderPoliciesUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "reorderPoliciesRequest"
        description: "reorderPoliciesRequest"
        required: true
        schema:
          $ref: "#/definitions/ReorderPoliciesRequest"
        x-exportParamName: "ReorderPoliciesRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/route-table:
    get:
      tags:
      - "route-table-controller"
      summary: "List route-tables"
      operationId: "listRouteTablesUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ListRouteTablesResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "route-table-controller"
      summary: "Create route-table"
      operationId: "createRouteTableUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createRouteTableRequest"
        description: "createRouteTableRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateRouteTableRequest"
        x-exportParamName: "CreateRouteTableRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "route-table-controller"
      summary: "Delete all route-tables"
      operationId: "deleteRouteTablesUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/route-table/{uuid}:
    get:
      tags:
      - "route-table-controller"
      summary: "Get route-table by uuid"
      operationId: "getRouteTableUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "uuid"
        in: "path"
        description: "The route-table uuid"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RouteTableResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "route-table-controller"
      summary: "Delete Route Table"
      operationId: "deleteRouteTableUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "uuid"
        in: "path"
        description: "The route-table uuid"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/route-table/{uuid}/routes:
    put:
      tags:
      - "route-table-controller"
      summary: "Add/remove routes of route-table"
      operationId: "updateRouteTableRoutesUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateRouteRequest"
        description: "updateRouteRequest"
        required: true
        schema:
          $ref: "#/definitions/RouteTableUpdateRouteRequest"
        x-exportParamName: "UpdateRouteRequest"
      - name: "uuid"
        in: "path"
        description: "The route-table uuid"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RouteTableResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/route-table/{uuid}/subnets:
    put:
      tags:
      - "route-table-controller"
      summary: "Add/remove subnets of route-table"
      operationId: "updateRouteTableSubnetsUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateSubnetRequest"
        description: "updateSubnetRequest"
        required: true
        schema:
          $ref: "#/definitions/RouteTableUpdateSubnetRequest"
        x-exportParamName: "UpdateSubnetRequest"
      - name: "uuid"
        in: "path"
        description: "The route-table uuid"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/RouteTableResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/secgroup-rules:
    post:
      tags:
      - "secgroup-rule-rest-controller"
      summary: "Create security group rule"
      operationId: "createSecgroupRuleUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createSecurityGroupRuleRequest"
        description: "createSecurityGroupRuleRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateSecurityGroupRuleRequest"
        x-exportParamName: "CreateSecurityGroupRuleRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupRuleResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "secgroup-rule-rest-controller"
      summary: "Update security group rule"
      operationId: "updateUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateSecurityGroupRuleRequest"
        description: "updateSecurityGroupRuleRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateSecurityGroupRuleRequest"
        x-exportParamName: "UpdateSecurityGroupRuleRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupRuleResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "secgroup-rule-rest-controller"
      summary: "Delete security group rule"
      operationId: "deleteSecgroupRuleUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteSecurityGroupRuleRequest"
        description: "deleteSecurityGroupRuleRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteSecurityGroupRuleRequest"
        x-exportParamName: "DeleteSecurityGroupRuleRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/secgroup-rules/secgroup-ids/{secgroup_id}:
    get:
      tags:
      - "secgroup-rule-rest-controller"
      summary: "listSecgroupRuleBySecgroup"
      operationId: "listSecgroupRuleBySecgroupUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroup_id"
        in: "path"
        description: "secgroup_id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupRuleResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/secgroup-rules/{secgroup_rule_id}:
    get:
      tags:
      - "secgroup-rule-rest-controller"
      summary: "getSecgroupRule"
      operationId: "getSecgroupRuleUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroup_rule_id"
        in: "path"
        description: "secgroup_rule_id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupRuleId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupRuleResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/secgroups:
    get:
      tags:
      - "secgroup-rest-controller"
      summary: "listSecgroup"
      operationId: "listSecgroupUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "secgroup-rest-controller"
      summary: "Create security group"
      operationId: "createSecgroupUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createSecurityGroupRequest"
        description: "createSecurityGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateSecurityGroupRequest"
        x-exportParamName: "CreateSecurityGroupRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "secgroup-rest-controller"
      summary: "Update security group"
      operationId: "updateSecgroupUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "editSecurityGroupRequest"
        description: "editSecurityGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/EditSecurityGroupRequest"
        x-exportParamName: "EditSecurityGroupRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "secgroup-rest-controller"
      summary: "Delete security group"
      operationId: "deleteSecgroupUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteSecurityGroupRequest"
        description: "deleteSecurityGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteSecurityGroupRequest"
        x-exportParamName: "DeleteSecurityGroupRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/secgroups/simple-servers/{server_id}:
    get:
      tags:
      - "secgroup-rest-controller"
      summary: "getForSimpleServer"
      operationId: "getForSimpleServerUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "server_id"
        in: "path"
        description: "server_id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/secgroups/vm-ids/{vm_id}:
    get:
      tags:
      - "secgroup-rest-controller"
      summary: "listSecgroupByInstance"
      operationId: "listSecgroupByInstanceUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "vm_id"
        in: "path"
        description: "vm_id"
        required: true
        type: "string"
        x-exportParamName: "VmId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/secgroups/{secgroup_id}:
    get:
      tags:
      - "secgroup-rest-controller"
      summary: "getSecgroup"
      operationId: "getSecgroupUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroup_id"
        in: "path"
        description: "secgroup_id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SecgroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/server-groups:
    get:
      tags:
      - "server-group-rest-controller"
      summary: "List server group"
      operationId: "listServerGroupUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServerGroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "server-group-rest-controller"
      summary: "Create server group"
      operationId: "createServerGroupUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createServerGroupRequest"
        description: "createServerGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateServerGroupRequest"
        x-exportParamName: "CreateServerGroupRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServerGroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "server-group-rest-controller"
      summary: "Update server group"
      operationId: "updateServerGroupUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateServerGroupRequest"
        description: "updateServerGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateServerGroupRequest"
        x-exportParamName: "UpdateServerGroupRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServerGroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "server-group-rest-controller"
      summary: "Delete server group"
      operationId: "deleteServerGroupUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteServerRequest"
        description: "deleteServerRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteServerGroupRequest"
        x-exportParamName: "DeleteServerRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServerGroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/server-groups/policies:
    get:
      tags:
      - "server-group-rest-controller"
      summary: "List server group policy"
      operationId: "listServerGroupPolicyUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServerGroupPolicyResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/server-groups/{server_group_id}:
    get:
      tags:
      - "server-group-rest-controller"
      summary: "Get server group"
      operationId: "getServerGroupUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "server_group_id"
        in: "path"
        description: "The server group id"
        required: true
        type: "string"
        x-exportParamName: "ServerGroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServerGroupResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/servers:
    get:
      tags:
      - "server-rest-controller"
      summary: "List server"
      operationId: "listServerUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServerResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "server-rest-controller"
      summary: "Create server"
      operationId: "createServerUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createServerRequest"
        description: "createServerRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateServerRequest"
        x-exportParamName: "CreateServerRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServerResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "server-rest-controller"
      summary: "Delete Server"
      operationId: "deleteServerUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteServerRequest"
        description: "deleteServerRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteServerRequest"
        x-exportParamName: "DeleteServerRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServerResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/servers/limit:
    get:
      tags:
      - "server-rest-controller"
      summary: "Server limit"
      operationId: "serverLimitUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServerLimit"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/servers/reboot:
    put:
      tags:
      - "server-rest-controller"
      summary: "Reboot server"
      operationId: "rebootServerUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateServerRequest"
        description: "updateServerRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateServerRequest"
        x-exportParamName: "UpdateServerRequest"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServerResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/servers/resize:
    put:
      tags:
      - "server-rest-controller"
      summary: "Change flavor of server"
      operationId: "resizeServerUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "resizeServerRequest"
        description: "resizeServerRequest"
        required: true
        schema:
          $ref: "#/definitions/ResizeServerRequest"
        x-exportParamName: "ResizeServerRequest"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServerResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/servers/start:
    put:
      tags:
      - "server-rest-controller"
      summary: "Start server"
      operationId: "startServerUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateServerRequest"
        description: "updateServerRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateServerRequest"
        x-exportParamName: "UpdateServerRequest"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServerResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/servers/stop:
    put:
      tags:
      - "server-rest-controller"
      summary: "Stop server"
      operationId: "stopServerUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateServerRequest"
        description: "updateServerRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateServerRequest"
        x-exportParamName: "UpdateServerRequest"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServerResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/servers/update_sec_group:
    put:
      tags:
      - "server-rest-controller"
      summary: "Update SecGroups of server"
      operationId: "updateSecGroupServerUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "changeSecGroupRequest"
        description: "changeSecGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/ChangeSecGroupRequest"
        x-exportParamName: "ChangeSecGroupRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/ServerResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/servers/{server_id}:
    get:
      tags:
      - "server-rest-controller"
      summary: "Get server by id"
      operationId: "getServerUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "server_id"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/ServerResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/simple-servers:
    get:
      tags:
      - "simple-server-rest-controller"
      summary: "List simple server"
      operationId: "listServerUsingGET_2"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«SimpleServer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "simple-server-rest-controller"
      summary: "Delete simple server"
      operationId: "deleteServerUsingDELETE_2"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteServerRequest"
        description: "deleteServerRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteServerRequest"
        x-exportParamName: "DeleteServerRequest"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse«SimpleServer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/simple-servers/reboot:
    put:
      tags:
      - "simple-server-rest-controller"
      summary: "Reboot simple server"
      operationId: "rebootServerUsingPUT_2"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateServerRequest"
        description: "updateServerRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateServerRequest"
        x-exportParamName: "UpdateServerRequest"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse«SimpleServer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/simple-servers/start:
    put:
      tags:
      - "simple-server-rest-controller"
      summary: "Start simple server"
      operationId: "startServerUsingPUT_2"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateServerRequest"
        description: "updateServerRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateServerRequest"
        x-exportParamName: "UpdateServerRequest"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse«SimpleServer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/simple-servers/stop:
    put:
      tags:
      - "simple-server-rest-controller"
      summary: "Stop simple server"
      operationId: "stopServerUsingPUT_2"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateServerRequest"
        description: "updateServerRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateServerRequest"
        x-exportParamName: "UpdateServerRequest"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse«SimpleServer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/simple-servers/{server_id}:
    get:
      tags:
      - "simple-server-rest-controller"
      summary: "Get simple server"
      operationId: "getServerUsingGET_2"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "server_id"
        in: "path"
        description: "server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«SimpleServer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/simple-servers/{server_id}/console:
    get:
      tags:
      - "simple-server-rest-controller"
      summary: "Get console simple server"
      operationId: "getConsoleServerUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "server_id"
        in: "path"
        description: "server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«string»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/simple-volumes:
    get:
      tags:
      - "simple-volume-rest-controller"
      summary: "List simple volume"
      operationId: "listVolumeUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«SimpleVolume»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/simple-volumes/{volume_id}:
    get:
      tags:
      - "simple-volume-rest-controller"
      summary: "Get simple volume"
      operationId: "getVolumeUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "volume_id"
        in: "path"
        description: "volume id"
        required: true
        type: "string"
        x-exportParamName: "VolumeId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«SimpleServer»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/ssh_keys:
    get:
      tags:
      - "ssh-key-rest-controller"
      summary: "List SSH key"
      operationId: "listSSHKeyUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SSHKeyResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "ssh-key-rest-controller"
      summary: "Create SSH key"
      operationId: "createSSHKeyUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createSSHKeyRequest"
        description: "createSSHKeyRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateSSHKeyRequest"
        x-exportParamName: "CreateSSHKeyRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SSHKeyResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "ssh-key-rest-controller"
      summary: "Delete SSH key"
      operationId: "deleteSSHKeyUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteSSHKeyRequest"
        description: "deleteSSHKeyRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteSSHKeyRequest"
        x-exportParamName: "DeleteSSHKeyRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/ssh_keys/import:
    post:
      tags:
      - "ssh-key-rest-controller"
      summary: "Import SSH key"
      operationId: "importSSHKeyUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "importSSHKeyRequest"
        description: "importSSHKeyRequest"
        required: true
        schema:
          $ref: "#/definitions/ImportSSHKeyRequest"
        x-exportParamName: "ImportSSHKeyRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SSHKeyResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/ssh_keys/{ssh_key_id}:
    get:
      tags:
      - "ssh-key-rest-controller"
      summary: "Get SSH key"
      operationId: "getSSHKeyUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "ssh_key_id"
        in: "path"
        description: "The ssh key id"
        required: true
        type: "string"
        x-exportParamName: "SshKeyId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SSHKeyResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/subnets:
    post:
      tags:
      - "subnet-rest-controller"
      summary: "createSubnet"
      operationId: "createSubnetUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createSubnetRequest"
        description: "createSubnetRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateSubnetRequest"
        x-exportParamName: "CreateSubnetRequest"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SubnetResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "subnet-rest-controller"
      summary: "deleteSubnet"
      operationId: "deleteSubnetUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteSubnetRequest"
        description: "deleteSubnetRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteSubnetRequest"
        x-exportParamName: "DeleteSubnetRequest"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/BaseResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/subnets/mp-public-interfaces:
    get:
      tags:
      - "subnet-rest-controller"
      summary: "getMpPublicInterface"
      operationId: "getMpPublicInterfaceUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SubnetResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/subnets/networks/{network_id}:
    get:
      tags:
      - "subnet-rest-controller"
      summary: "listSubnetsByNetwork"
      operationId: "listSubnetsByNetworkUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "network_id"
        in: "path"
        description: "network_id"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SubnetResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/subnets/{subnet_id}:
    get:
      tags:
      - "subnet-rest-controller"
      summary: "getSubnet"
      operationId: "getSubnetUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "subnet_id"
        in: "path"
        description: "subnet_id"
        required: true
        type: "string"
        x-exportParamName: "SubnetId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SubnetResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volume_default_id:
    get:
      tags:
      - "volume-type-rest-controller"
      summary: "getVolumeTypeDefaultId"
      operationId: "getVolumeTypeDefaultIdUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volume_type_zones:
    get:
      tags:
      - "volume-type-zone-rest-controller"
      summary: "listVolumeTypeZone"
      operationId: "listVolumeTypeZoneUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeTypeZoneResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volume_type_zones/{volume_type_zone_id}:
    get:
      tags:
      - "volume-type-zone-rest-controller"
      summary: "getVolumeTypeZone"
      operationId: "getVolumeTypeZoneUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "volume_type_zone_id"
        in: "path"
        description: "volume_type_zone_id"
        required: true
        type: "string"
        x-exportParamName: "VolumeTypeZoneId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeTypeZoneResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volume_types:
    get:
      tags:
      - "volume-type-rest-controller"
      summary: "listAllVolumeType"
      operationId: "listAllVolumeTypeUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeTypeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volume_types/{volume_type_id}:
    get:
      tags:
      - "volume-type-rest-controller"
      summary: "getVolumeType"
      operationId: "getVolumeTypeUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "volume_type_id"
        in: "path"
        description: "volume_type_id"
        required: true
        type: "string"
        x-exportParamName: "VolumeTypeId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeTypeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volumes:
    get:
      tags:
      - "volume-rest-controller"
      summary: "List volume"
      operationId: "listVolumeUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "volume-rest-controller"
      summary: "Create volume"
      operationId: "createVolumeUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createVolumeRequest"
        description: "createVolumeRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateVolumeRequest"
        x-exportParamName: "CreateVolumeRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "volume-rest-controller"
      summary: "Delete volume"
      operationId: "deleteVolumeUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteVolumeRequest"
        description: "deleteVolumeRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteVolumeRequest"
        x-exportParamName: "DeleteVolumeRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volumes/attach:
    put:
      tags:
      - "volume-rest-controller"
      summary: "Attach volume into the server"
      operationId: "attachVolumeUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "attachVolumeRequest"
        description: "attachVolumeRequest"
        required: true
        schema:
          $ref: "#/definitions/AttachVolumeRequest"
        x-exportParamName: "AttachVolumeRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volumes/detach:
    put:
      tags:
      - "volume-rest-controller"
      summary: "Detach volume into the server"
      operationId: "detachVolumeUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "detachVolumeRequest"
        description: "detachVolumeRequest"
        required: true
        schema:
          $ref: "#/definitions/DetachVolumeRequest"
        x-exportParamName: "DetachVolumeRequest"
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volumes/encryption_types:
    get:
      tags:
      - "volume-rest-controller"
      summary: "Get list encryption type"
      operationId: "listEncryptionUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EncryptionType"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volumes/resize:
    put:
      tags:
      - "volume-rest-controller"
      summary: "Resize volume"
      operationId: "resizeVolumeUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "resizeVolumeRequest"
        description: "resizeVolumeRequest"
        required: true
        schema:
          $ref: "#/definitions/ResizeVolumeRequest"
        x-exportParamName: "ResizeVolumeRequest"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volumes/servers/{server_id}:
    get:
      tags:
      - "volume-rest-controller"
      summary: "Get volume by server id"
      operationId: "getVolumeByInstanceIdUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "server_id"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volumes/servers/{server_id}/boot:
    get:
      tags:
      - "volume-rest-controller"
      summary: "Get boot volume by server id"
      operationId: "getBootVolumeByInstanceIdUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "server_id"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/volumes/{volume_id}:
    get:
      tags:
      - "volume-rest-controller"
      summary: "Get volume by id"
      operationId: "getVolumeUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "volume_id"
        in: "path"
        description: "The volume id"
        required: true
        type: "string"
        x-exportParamName: "VolumeId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/{flavor_zone_id}/flavors:
    get:
      tags:
      - "flavor-rest-controller"
      summary: "listFlavor"
      operationId: "listFlavorUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "flavor_zone_id"
        in: "path"
        description: "flavor_zone_id"
        required: true
        type: "string"
        x-exportParamName: "FlavorZoneId"
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/FlavorResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v1/{project_id}/{volume_type_zone_id}/volume_types:
    get:
      tags:
      - "volume-type-rest-controller"
      summary: "listVolumeType"
      operationId: "listVolumeTypeUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "project_id"
        in: "path"
        description: "project_id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "volume_type_zone_id"
        in: "path"
        description: "volume_type_zone_id"
        required: true
        type: "string"
        x-exportParamName: "VolumeTypeZoneId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeTypeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/external/callback:
    post:
      tags:
      - "vpc-external-callback-controller"
      summary: "Update status in task table"
      operationId: "updateStatusUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "updateTaskStatusRequest"
        description: "updateTaskStatusRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateTaskStatusRequest"
        x-exportParamName: "UpdateTaskStatusRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/CallbackResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/protocols:
    get:
      tags:
      - "protocol-rest-controller-v-2"
      summary: "List Protocol Supported"
      operationId: "listProtocolUsingGET"
      produces:
      - "*/*"
      parameters: []
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«JSONObject»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/clusters:
    get:
      tags:
      - "k-8-s-cluster-rest-controller-v-2"
      summary: "List cluster"
      operationId: "listClusterUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«InterfaceK8SClusterDetail»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/elastic-ips:
    get:
      tags:
      - "elastic-ip-rest-controller-v-2"
      summary: "List elastic-ip"
      operationId: "listElasticIpUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«ElasticIpDetail»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/network-interfaces-elastic:
    get:
      tags:
      - "network-interface-elastic-rest-controller-v-2"
      summary: "List Network Interface Elastic"
      operationId: "listNetworkInterfaceElasticUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«NetworkInterfaceElastic»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "network-interface-elastic-rest-controller-v-2"
      summary: "Create Network Interface Elastic"
      operationId: "createNetworkInterfaceElasticUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createNetworkInterfaceRequest"
        description: "createNetworkInterfaceRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateNetworkInterfaceRequest"
        x-exportParamName: "CreateNetworkInterfaceRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«NetworkInterfaceElastic»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/network-interfaces-elastic/{networkInterfaceId}:
    get:
      tags:
      - "network-interface-elastic-rest-controller-v-2"
      summary: "Get Network Interface Elastic"
      operationId: "getNetworkInterfaceElasticUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "networkInterfaceId"
        in: "path"
        description: "The network interface id"
        required: true
        type: "string"
        x-exportParamName: "NetworkInterfaceId"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«NetworkInterfaceElastic»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "network-interface-elastic-rest-controller-v-2"
      summary: "Delete Network Interface Elastic"
      operationId: "deleteNetworkInterfaceElasticUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - name: "networkInterfaceId"
        in: "path"
        description: "The network interface id"
        required: true
        type: "string"
        x-exportParamName: "NetworkInterfaceId"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/network-interfaces-elastic/{networkInterfaceId}/rename:
    put:
      tags:
      - "network-interface-elastic-rest-controller-v-2"
      summary: "Rename Network Interface Elastic"
      operationId: "renameNetworkInterfaceElasticUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "networkInterfaceId"
        in: "path"
        description: "The network interface id"
        required: true
        type: "string"
        x-exportParamName: "NetworkInterfaceId"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "renameNetworkInterfaceRequest"
        description: "renameNetworkInterfaceRequest"
        required: true
        schema:
          $ref: "#/definitions/RenameNetworkInterfaceRequest"
        x-exportParamName: "RenameNetworkInterfaceRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«NetworkInterfaceElastic»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/networks:
    get:
      tags:
      - "network-rest-controller-v-2"
      summary: "List network"
      operationId: "listNetworkUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "projectId"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«NetworkDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "network-rest-controller-v-2"
      summary: "Create network"
      operationId: "createNetworkUsingPOST_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createNetworkRequest"
        description: "createNetworkRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateNetworkRequest"
        x-exportParamName: "CreateNetworkRequest"
      - name: "projectId"
        in: "path"
        description: "projectId"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«NetworkDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/networks/active:
    get:
      tags:
      - "network-rest-controller-v-2"
      summary: "List network active"
      operationId: "listNetworkActiveUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "projectId"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«NetworkDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/networks/{networkId}:
    get:
      tags:
      - "network-rest-controller-v-2"
      summary: "Get network"
      operationId: "getNetworkUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "networkId"
        in: "path"
        description: "networkId"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "projectId"
        in: "path"
        description: "projectId"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/NetworkDto"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "network-rest-controller-v-2"
      summary: "Delete network"
      operationId: "deleteNetworkUsingDELETE_1"
      produces:
      - "*/*"
      parameters:
      - name: "networkId"
        in: "path"
        description: "networkId"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "projectId"
        in: "path"
        description: "projectId"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    patch:
      tags:
      - "network-rest-controller-v-2"
      summary: "Edit network"
      operationId: "editNetworkUsingPATCH"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "networkId"
        in: "path"
        description: "networkId"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "projectId"
        in: "path"
        description: "projectId"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateNetworkRequest"
        description: "updateNetworkRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateNetworkRequest"
        x-exportParamName: "UpdateNetworkRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«NetworkDto»"
  /v2/{projectId}/networks/{networkId}/subnets:
    get:
      tags:
      - "subnet-rest-controller-v-2"
      summary: "List subnet of network"
      operationId: "listSubnetOfNetworkUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "networkId"
        in: "path"
        description: "networkId"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "projectId"
        in: "path"
        description: "projectId"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SubnetDto"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "subnet-rest-controller-v-2"
      summary: "createSubnet"
      operationId: "createSubnetUsingPOST_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createSubnetRequest"
        description: "createSubnetRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateSubnetRequest"
        x-exportParamName: "CreateSubnetRequest"
      - name: "networkId"
        in: "path"
        description: "networkId"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "projectId"
        in: "path"
        description: "projectId"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«SubnetDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/networks/{networkId}/subnets/{subnetId}:
    get:
      tags:
      - "subnet-rest-controller-v-2"
      summary: "List subnet by id"
      operationId: "getSubnetByIdUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "networkId"
        in: "path"
        description: "networkId"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      - name: "projectId"
        in: "path"
        description: "projectId"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "subnetId"
        in: "path"
        description: "subnetId"
        required: true
        type: "string"
        x-exportParamName: "SubnetId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/SubnetDto"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "subnet-rest-controller-v-2"
      summary: "Delete subnet"
      operationId: "deleteNetworkUsingDELETE_2"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "projectId"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "subnetId"
        in: "path"
        description: "subnetId"
        required: true
        type: "string"
        x-exportParamName: "SubnetId"
      - name: "networkId"
        in: "path"
        description: "networkId"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    patch:
      tags:
      - "subnet-rest-controller-v-2"
      summary: "Edit subnet"
      operationId: "editSubnetUsingPATCH"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "projectId"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "subnetId"
        in: "path"
        description: "subnetId"
        required: true
        type: "string"
        x-exportParamName: "SubnetId"
      - in: "body"
        name: "updateSubnetRequest"
        description: "updateSubnetRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateSubnetRequest"
        x-exportParamName: "UpdateSubnetRequest"
      - name: "networkId"
        in: "path"
        description: "networkId"
        required: true
        type: "string"
        x-exportParamName: "NetworkId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«SubnetDto»"
  /v2/{projectId}/quotas/quotaUsed:
    get:
      tags:
      - "quota-rest-controller-v-2"
      summary: "List Quota-used"
      operationId: "listQuotaUsedUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«QuotaUsedDto»»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/secgroups:
    get:
      tags:
      - "secgroup-rest-controller-v-2"
      summary: "List All SecurityGroup"
      operationId: "getAlllistSecgroupUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "projectId"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«SecgroupDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "secgroup-rest-controller-v-2"
      summary: "Create security group"
      operationId: "createSecgroupUsingPOST_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createSecurityGroupRequest"
        description: "createSecurityGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateSecurityGroupRequest"
        x-exportParamName: "CreateSecurityGroupRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/DataResponse«SecgroupEntity»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/secgroups/{secgroupId}:
    get:
      tags:
      - "secgroup-rest-controller-v-2"
      summary: "Security Group By Security Group Id"
      operationId: "getSecgroupUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«SecgroupDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "secgroup-rest-controller-v-2"
      summary: "Update security group"
      operationId: "updateSecgroupUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "editSecurityGroupRequest"
        description: "editSecurityGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/EditSecurityGroupRequest"
        x-exportParamName: "EditSecurityGroupRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«SecgroupDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "secgroup-rest-controller-v-2"
      summary: "Delete security group"
      operationId: "deleteSecgroupUsingDELETE_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/secgroups/{secgroupId}/secGroupRules:
    get:
      tags:
      - "secgroup-rest-controller-v-2"
      summary: "Security Group Rule By Security Group Id"
      operationId: "getListSecgroupRuleBySecgroupUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«SecgroupruleDto»»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/secgroups/{secgroupId}/secgroupRules:
    post:
      tags:
      - "secgroup-rule-rest-controller-v-2"
      summary: "Create security group rule"
      operationId: "createSecgroupRuleUsingPOST_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createSecurityGroupRuleRequest"
        description: "createSecurityGroupRuleRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateSecurityGroupRuleRequest"
        x-exportParamName: "CreateSecurityGroupRuleRequest"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/DataResponse«SecgroupRuleEntity»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/secgroups/{secgroupId}/secgroupRules/samples:
    get:
      tags:
      - "secgroup-rule-rest-controller-v-2"
      summary: "List SecurityGroup Rule Sample"
      operationId: "getSecGroupRuleSamplesUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«SecurityGroupRulesSampleEntity»\
              »"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/secgroups/{secgroupId}/secgroupRules/{secgroupRuleId}:
    get:
      tags:
      - "secgroup-rule-rest-controller-v-2"
      summary: "Security Group By Security Group Id"
      operationId: "getSecgroupRuleUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroupRuleId"
        in: "path"
        description: "secgroupRuleId"
        required: true
        type: "string"
        x-exportParamName: "SecgroupRuleId"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«SecgroupruleDto»»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "secgroup-rule-rest-controller-v-2"
      summary: "Update security group rule"
      operationId: "updateUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroupRuleId"
        in: "path"
        description: "The secgroup rule id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupRuleId"
      - in: "body"
        name: "updateSecurityGroupRuleRequest"
        description: "updateSecurityGroupRuleRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateSecurityGroupRuleRequest"
        x-exportParamName: "UpdateSecurityGroupRuleRequest"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«SecgroupruleDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "secgroup-rule-rest-controller-v-2"
      summary: "Delete security group rule"
      operationId: "deleteSecgroupRuleUsingDELETE_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroupRuleId"
        in: "path"
        description: "The secgroup rule id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupRuleId"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/secgroups/{secgroupId}/servers:
    get:
      tags:
      - "secgroup-rest-controller-v-2"
      summary: "Infomation's Server of Security Group "
      operationId: "getListServerBySecgroupUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "secgroupId"
        in: "path"
        description: "The secgroup id"
        required: true
        type: "string"
        x-exportParamName: "SecgroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«ServerOfSecgroupDto»»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/serverGroups:
    get:
      tags:
      - "server-group-rest-controller-v-2"
      summary: "List server group with Paging"
      operationId: "getListServerGroupWithPagingUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "page"
        in: "query"
        description: "page"
        required: true
        type: "string"
        default: "1"
        x-exportParamName: "Page"
      - name: "projectId"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: true
        type: "string"
        default: "10"
        x-exportParamName: "Size"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«ServerGroupDetail»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "server-group-rest-controller-v-2"
      summary: "Create server group"
      operationId: "createServerGroupUsingPOST_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createServerGroupRequest"
        description: "createServerGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateServerGroupRequest"
        x-exportParamName: "CreateServerGroupRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/DataResponse«ServerGroupDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/serverGroups/policies:
    get:
      tags:
      - "server-group-rest-controller-v-2"
      summary: "List server group policy"
      operationId: "listServerGroupPolicyUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«ServerGroupPolicy»»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/serverGroups/{serverGroupId}:
    get:
      tags:
      - "server-group-rest-controller-v-2"
      summary: "Get server group"
      operationId: "getServerGroupUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverGroupId"
        in: "path"
        description: "The server group id"
        required: true
        type: "string"
        x-exportParamName: "ServerGroupId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«ServerGroupDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    put:
      tags:
      - "server-group-rest-controller-v-2"
      summary: "Update server group"
      operationId: "updateServerGroupUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverGroupId"
        in: "path"
        description: "The server group id"
        required: true
        type: "string"
        x-exportParamName: "ServerGroupId"
      - in: "body"
        name: "updateServerGroupRequest"
        description: "updateServerGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateServerGroupRequestV2"
        x-exportParamName: "UpdateServerGroupRequest"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«ServerGroupDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "server-group-rest-controller-v-2"
      summary: "Delete server group"
      operationId: "deleteServerGroupUsingDELETE_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverGroupId"
        in: "path"
        description: "The server group id"
        required: true
        type: "string"
        x-exportParamName: "ServerGroupId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers:
    get:
      tags:
      - "server-rest-controller-v-2"
      summary: "List server"
      operationId: "listServerUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«Server»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "server-rest-controller-v-2"
      summary: "Create server"
      operationId: "createServerUsingPOST_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createServerRequest"
        description: "createServerRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateServerRequest"
        x-exportParamName: "CreateServerRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}:
    get:
      tags:
      - "server-rest-controller-v-2"
      summary: "Get server by id"
      operationId: "getServerUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«Server»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "server-rest-controller-v-2"
      summary: "Delete Server"
      operationId: "deleteServerUsingDELETE_1"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "deleteServerRequest"
        description: "deleteServerRequest"
        required: true
        schema:
          $ref: "#/definitions/DeleteServerRequest"
        x-exportParamName: "DeleteServerRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/actions:
    get:
      tags:
      - "server-rest-controller-v-2"
      summary: "List Action Of Server"
      operationId: "listActionUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«ServerAction»»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/console-log:
    get:
      tags:
      - "server-rest-controller-v-2"
      summary: "Get console log"
      operationId: "getConsoleLogUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«string»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/console-url:
    get:
      tags:
      - "server-rest-controller-v-2"
      summary: "Get console url"
      operationId: "getConsoleUrlUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«string»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/external-network-interfaces:
    post:
      tags:
      - "server-rest-controller-v-2"
      summary: "Attach External Network Interface"
      operationId: "attachExternalNetworkInterfaceUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "attachExternalNetworkInterfaceRequest"
        description: "attachExternalNetworkInterfaceRequest"
        required: true
        schema:
          $ref: "#/definitions/AttachExternalNetworkInterfaceRequest"
        x-exportParamName: "AttachExternalNetworkInterfaceRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "server-rest-controller-v-2"
      summary: "Detach External Network Interface"
      operationId: "detachExternalNetworkInterfaceUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "detachExternalNetworkInterfaceRequest"
        description: "detachExternalNetworkInterfaceRequest"
        required: true
        schema:
          $ref: "#/definitions/DetachExternalNetworkInterfaceRequest"
        x-exportParamName: "DetachExternalNetworkInterfaceRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/internal-network-interfaces:
    post:
      tags:
      - "server-rest-controller-v-2"
      summary: "Attach Internal Network Interface"
      operationId: "attachNetworkInterfaceUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "attachNetworkInterfaceRequest"
        description: "attachNetworkInterfaceRequest"
        required: true
        schema:
          $ref: "#/definitions/AttachNetworkInterfaceRequest"
        x-exportParamName: "AttachNetworkInterfaceRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "server-rest-controller-v-2"
      summary: "Detach Internal Network Interface"
      operationId: "detachNetworkInterfaceUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "detachNetworkInterfaceRequest"
        description: "detachNetworkInterfaceRequest"
        required: true
        schema:
          $ref: "#/definitions/DetachNetworkInterfaceRequest"
        x-exportParamName: "DetachNetworkInterfaceRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/network-interfaces:
    get:
      tags:
      - "server-rest-controller-v-2"
      summary: "List Network Interface Of Server"
      operationId: "listNetworkInterfaceUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«ServerNetworkInterfaceDetail»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/reboot:
    put:
      tags:
      - "server-rest-controller-v-2"
      summary: "Reboot server"
      operationId: "rebootServerUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/rename:
    put:
      tags:
      - "server-rest-controller-v-2"
      summary: "Rename Server"
      operationId: "renameServerUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "renameServerRequest"
        description: "renameServerRequest"
        required: true
        schema:
          $ref: "#/definitions/RenameServerRequest"
        x-exportParamName: "RenameServerRequest"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«Server»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/resize:
    put:
      tags:
      - "server-rest-controller-v-2"
      summary: "Change flavor of server"
      operationId: "resizeServerUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "resizeServerRequest"
        description: "resizeServerRequest"
        required: true
        schema:
          $ref: "#/definitions/ResizeServerRequest"
        x-exportParamName: "ResizeServerRequest"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/sec-groups:
    get:
      tags:
      - "server-rest-controller-v-2"
      summary: "List Sec Group Of Server"
      operationId: "listSecGroupUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«ServerSecGroupDetail»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/start:
    put:
      tags:
      - "server-rest-controller-v-2"
      summary: "Start server"
      operationId: "startServerUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/stop:
    put:
      tags:
      - "server-rest-controller-v-2"
      summary: "Stop server"
      operationId: "stopServerUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/update-sec-group:
    put:
      tags:
      - "server-rest-controller-v-2"
      summary: "Update SecGroups of server"
      operationId: "updateSecGroupServerUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "changeSecGroupRequest"
        description: "changeSecGroupRequest"
        required: true
        schema:
          $ref: "#/definitions/ChangeSecGroupRequest"
        x-exportParamName: "ChangeSecGroupRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/wan-ips/{wanIpId}/attach:
    put:
      tags:
      - "server-rest-controller-v-2"
      summary: "Attach Wan IP"
      operationId: "attachWanIPUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "attachDetachWanIPRequest"
        description: "attachDetachWanIPRequest"
        required: true
        schema:
          $ref: "#/definitions/AttachDetachWanIPRequest"
        x-exportParamName: "AttachDetachWanIPRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      - name: "wanIpId"
        in: "path"
        description: "The wan ip id"
        required: true
        type: "string"
        x-exportParamName: "WanIpId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/servers/{serverId}/wan-ips/{wanIpId}/detach:
    put:
      tags:
      - "server-rest-controller-v-2"
      summary: "Detach Wan IP"
      operationId: "detachWanIPUsingPUT"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "attachDetachWanIPRequest"
        description: "attachDetachWanIPRequest"
        required: true
        schema:
          $ref: "#/definitions/AttachDetachWanIPRequest"
        x-exportParamName: "AttachDetachWanIPRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      - name: "wanIpId"
        in: "path"
        description: "The wan ip id"
        required: true
        type: "string"
        x-exportParamName: "WanIpId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/sshKeys:
    get:
      tags:
      - "ssh-key-rest-controller-v-2"
      summary: "List  SSH key Paging"
      operationId: "getListSecgroupWithPagingUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - name: "page"
        in: "query"
        description: "page"
        required: true
        type: "string"
        default: "1"
        x-exportParamName: "Page"
      - name: "projectId"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: true
        type: "string"
        default: "10"
        x-exportParamName: "Size"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«SSHKeyDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "ssh-key-rest-controller-v-2"
      summary: "Create SSH key"
      operationId: "createSSHKeyUsingPOST_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createSSHKeyRequest"
        description: "createSSHKeyRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateSSHKeyRequest"
        x-exportParamName: "CreateSSHKeyRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/DataResponse«SSHKeyDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/sshKeys/import:
    post:
      tags:
      - "ssh-key-rest-controller-v-2"
      summary: "Import SSH key"
      operationId: "importSSHKeyUsingPOST_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "importSSHKeyRequest"
        description: "importSSHKeyRequest"
        required: true
        schema:
          $ref: "#/definitions/ImportSSHKeyRequest"
        x-exportParamName: "ImportSSHKeyRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/DataResponse«SSHKeyDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/sshKeys/{sshKeyId}:
    get:
      tags:
      - "ssh-key-rest-controller-v-2"
      summary: "Get SSH key"
      operationId: "getSSHKeyUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "sshKeyId"
        in: "path"
        description: "The ssh key id"
        required: true
        type: "string"
        x-exportParamName: "SshKeyId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«SSHKeyDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "ssh-key-rest-controller-v-2"
      summary: "Delete SSH key"
      operationId: "deleteSSHKeyUsingDELETE_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "sshKeyId"
        in: "path"
        description: "The ssh-key id"
        required: true
        type: "string"
        x-exportParamName: "SshKeyId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/user-images:
    get:
      tags:
      - "user-image-rest-controller-v-2"
      summary: "List User Image"
      operationId: "listImageUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«UserImage»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/user-images/servers/{serverId}:
    post:
      tags:
      - "user-image-rest-controller-v-2"
      summary: "Start server"
      operationId: "createImageUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createUserImageRequest"
        description: "createUserImageRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateUserImageRequest"
        x-exportParamName: "CreateUserImageRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/user-images/{imageId}:
    get:
      tags:
      - "user-image-rest-controller-v-2"
      summary: "List User Image By ID"
      operationId: "listImageByIdUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "imageId"
        in: "path"
        description: "The image id"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/UserImage"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "user-image-rest-controller-v-2"
      summary: "Delete User Image"
      operationId: "deleteImageUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - name: "imageId"
        in: "path"
        description: "The image id"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/virtualIpAddress:
    get:
      tags:
      - "virtual-ip-address-rest-controller-v-2"
      summary: "List All Virtual Ip Address"
      operationId: "listVirtualIpAddressUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«VirtualIpAddressDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "virtual-ip-address-rest-controller-v-2"
      summary: "Create Virtual Ip Address"
      operationId: "createVirtualIpAddressUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createVirtualIpAddressRequest"
        description: "createVirtualIpAddressRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateVirtualIpAddressRequest"
        x-exportParamName: "CreateVirtualIpAddressRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/DataResponse«VirtualIpAddressDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/virtualIpAddress/internalNetworkInterfaces:
    get:
      tags:
      - "virtual-ip-address-rest-controller-v-2"
      summary: "List of internal network interface for adding address pair"
      operationId: "listInternalNetworkInterfaceUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«InternalNetworkInterfaceDto»»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/virtualIpAddress/{virtualIpAddressId}:
    put:
      tags:
      - "virtual-ip-address-rest-controller-v-2"
      summary: "Update virtual ip address"
      operationId: "updateUsingPUT_2"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "updateSecurityGroupRuleRequest"
        description: "updateSecurityGroupRuleRequest"
        required: true
        schema:
          $ref: "#/definitions/UpdateVirtualIpAddressRequest"
        x-exportParamName: "UpdateSecurityGroupRuleRequest"
      - name: "virtualIpAddressId"
        in: "path"
        description: "The virtual Ip AddressId id"
        required: true
        type: "string"
        x-exportParamName: "VirtualIpAddressId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«VirtualIpAddressDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "virtual-ip-address-rest-controller-v-2"
      summary: "Delete virtual ip address"
      operationId: "deleteVirtualIpAddressUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "virtualIpAddressId"
        in: "path"
        description: "The ssh-key id"
        required: true
        type: "string"
        x-exportParamName: "VirtualIpAddressId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/virtualIpAddress/{virtualIpAddressId}/addressPairs:
    get:
      tags:
      - "virtual-ip-address-rest-controller-v-2"
      summary: "List address pair interfaces "
      operationId: "getListAddressPairUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "virtualIpAddressId"
        in: "path"
        description: "The Virtual Ip Address id"
        required: true
        type: "string"
        x-exportParamName: "VirtualIpAddressId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«List«AddressPairDto»»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "virtual-ip-address-rest-controller-v-2"
      summary: "Create Address Pair"
      operationId: "addAddressPairUsingPOST"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createAddressPairModelRequest"
        description: "createAddressPairModelRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateAddressPairRequest"
        x-exportParamName: "CreateAddressPairModelRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "virtualIpAddressId"
        in: "path"
        description: "The Virtual Ip Address id"
        required: true
        type: "string"
        x-exportParamName: "VirtualIpAddressId"
      deprecated: false
      responses:
        "201":
          description: "Created"
          schema:
            $ref: "#/definitions/DataResponse«VirtualIpAddressNetworkEntity»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/virtualIpAddress/{virtualIpAddressId}/addressPairs/{addressPairId}:
    delete:
      tags:
      - "virtual-ip-address-rest-controller-v-2"
      summary: "Delete Address Pair"
      operationId: "removeAddressPairUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - name: "addressPairId"
        in: "path"
        description: "The Address Pair id"
        required: true
        type: "string"
        x-exportParamName: "AddressPairId"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "virtualIpAddressId"
        in: "path"
        description: "The Virtual Ip Address id"
        required: true
        type: "string"
        x-exportParamName: "VirtualIpAddressId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/volumes:
    get:
      tags:
      - "volume-rest-controller-v-2"
      summary: "List volume"
      operationId: "listVolumeUsingGET_2"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "page"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "size"
        in: "query"
        description: "size"
        required: false
        type: "integer"
        format: "int32"
        x-exportParamName: "Size"
        x-optionalDataType: "Int32"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«Volume»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    post:
      tags:
      - "volume-rest-controller-v-2"
      summary: "Create volume"
      operationId: "createVolumeUsingPOST_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "createVolumeRequest"
        description: "createVolumeRequest"
        required: true
        schema:
          $ref: "#/definitions/CreateVolumeRequest"
        x-exportParamName: "CreateVolumeRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/volumes/servers/{serverId}:
    get:
      tags:
      - "volume-rest-controller-v-2"
      summary: "Get volume by server id"
      operationId: "getVolumeByInstanceIdUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/volumes/servers/{serverId}/boot:
    get:
      tags:
      - "volume-rest-controller-v-2"
      summary: "Get boot volume by server id"
      operationId: "getBootVolumeByInstanceIdUsingGET_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The volume id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/VolumeResponse"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/volumes/{volumeId}:
    get:
      tags:
      - "volume-rest-controller-v-2"
      summary: "Get volume by id"
      operationId: "getVolumeUsingGET_2"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "volumeId"
        in: "path"
        description: "The volume id"
        required: true
        type: "string"
        x-exportParamName: "VolumeId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/DataResponse«Volume»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
    delete:
      tags:
      - "volume-rest-controller-v-2"
      summary: "Delete volume"
      operationId: "deleteVolumeUsingDELETE_1"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "volumeId"
        in: "path"
        description: "The volume id"
        required: true
        type: "string"
        x-exportParamName: "VolumeId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse«Volume»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/volumes/{volumeId}/history:
    get:
      tags:
      - "volume-rest-controller-v-2"
      summary: "List volume"
      operationId: "listVolumeHistoryUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "volumeId"
        in: "path"
        description: "The volume id"
        required: true
        type: "string"
        x-exportParamName: "VolumeId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/VolumeAction"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/volumes/{volumeId}/resize:
    put:
      tags:
      - "volume-rest-controller-v-2"
      summary: "Resize volume"
      operationId: "resizeVolumeUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - in: "body"
        name: "resizeVolumeRequest"
        description: "resizeVolumeRequest"
        required: true
        schema:
          $ref: "#/definitions/ResizeVolumeRequest"
        x-exportParamName: "ResizeVolumeRequest"
      - name: "volumeId"
        in: "path"
        description: "The volume id"
        required: true
        type: "string"
        x-exportParamName: "VolumeId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse«Volume»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/volumes/{volumeId}/servers/{serverId}/attach:
    put:
      tags:
      - "volume-rest-controller-v-2"
      summary: "Attach volume into the server"
      operationId: "attachVolumeUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "attachVolumeRequest"
        description: "attachVolumeRequest"
        required: true
        schema:
          $ref: "#/definitions/AttachVolumeRequest"
        x-exportParamName: "AttachVolumeRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      - name: "volumeId"
        in: "path"
        description: "The volume id"
        required: true
        type: "string"
        x-exportParamName: "VolumeId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse«Volume»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/volumes/{volumeId}/servers/{serverId}/detach:
    put:
      tags:
      - "volume-rest-controller-v-2"
      summary: "Detach volume into the server"
      operationId: "detachVolumeUsingPUT_1"
      consumes:
      - "application/json"
      produces:
      - "*/*"
      parameters:
      - in: "body"
        name: "detachVolumeRequest"
        description: "detachVolumeRequest"
        required: true
        schema:
          $ref: "#/definitions/DetachVolumeRequest"
        x-exportParamName: "DetachVolumeRequest"
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "serverId"
        in: "path"
        description: "The server id"
        required: true
        type: "string"
        x-exportParamName: "ServerId"
      - name: "volumeId"
        in: "path"
        description: "The volume id"
        required: true
        type: "string"
        x-exportParamName: "VolumeId"
      deprecated: false
      responses:
        "202":
          description: "Accepted"
          schema:
            $ref: "#/definitions/DataResponse«Volume»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/wanIps:
    get:
      tags:
      - "wan-ip-rest-controller-v-2"
      summary: "List WAN IP"
      operationId: "listWanIpUsingGET"
      produces:
      - "*/*"
      parameters:
      - name: "name"
        in: "query"
        description: "name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "projectId"
        in: "path"
        description: "project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      deprecated: false
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Paging«WanIpDto»"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
  /v2/{projectId}/wanIps/{wanIpId}:
    delete:
      tags:
      - "wan-ip-rest-controller-v-2"
      summary: "Delete a WAN IP"
      operationId: "deleteWanIpUsingDELETE"
      produces:
      - "*/*"
      parameters:
      - name: "projectId"
        in: "path"
        description: "The project id"
        required: true
        type: "string"
        x-exportParamName: "ProjectId"
      - name: "wanIpId"
        in: "path"
        description: "The WAN IP id"
        required: true
        type: "string"
        x-exportParamName: "WanIpId"
      deprecated: false
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
        "500":
          description: "Internal Server Error"
definitions:
  AclPolicyRule:
    type: "object"
    properties:
      action:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      interfaceAclPolicyUuid:
        type: "string"
      port:
        type: "string"
      protocol:
        type: "string"
      seqNumber:
        type: "integer"
        format: "int32"
      source:
        type: "string"
      type:
        type: "string"
      uuid:
        type: "string"
    title: "AclPolicyRule"
  AddressPairDto:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      netInterfaceIp:
        type: "string"
      netInterfaceUuid:
        type: "string"
      uuid:
        type: "string"
      vipUuid:
        type: "string"
    title: "AddressPairDto"
  AttachDetachWanIPRequest:
    type: "object"
    properties:
      networkInterfaceId:
        type: "string"
        example: "net-a332cc50-8e24-4a45-ad9f-4136c7358503"
        description: "Id of network interface"
    title: "AttachDetachWanIPRequest"
    description: "Attach Detach Wan IP Request"
  AttachExternalNetworkInterfaceRequest:
    type: "object"
    properties:
      externalNetworkInterfaceId:
        type: "string"
        example: "net-a332cc50-8e24-4a45-ad9f-4136c7358503"
        description: "External network interface id"
    title: "AttachExternalNetworkInterfaceRequest"
    description: "Attach External Network Interface Request"
    example:
      externalNetworkInterfaceId: "net-a332cc50-8e24-4a45-ad9f-4136c7358503"
  AttachNetworkInterfaceRequest:
    type: "object"
    properties:
      subnetIds:
        type: "array"
        example:
        - "sub-a332cc50-8e24-4a45-ad9f-4136c7358503"
        description: "List Id of subnet"
        items:
          type: "string"
    title: "AttachNetworkInterfaceRequest"
    description: "Attach Network Interface Request"
    example:
      subnetIds:
      - "sub-a332cc50-8e24-4a45-ad9f-4136c7358503"
  AttachVolumeRequest:
    type: "object"
    title: "AttachVolumeRequest"
    description: "Attach Volume Request"
  AttachmentEntity:
    type: "object"
    properties:
      createdAt:
        $ref: "#/definitions/Timestamp"
      deletedAt:
        $ref: "#/definitions/Timestamp"
      id:
        type: "integer"
        format: "int32"
      interfaceInstanceUuid:
        type: "string"
      interfaceVolumeUuid:
        type: "string"
      projectId:
        type: "string"
    title: "AttachmentEntity"
  AttachmentResponse:
    type: "object"
    properties:
      attachmentList:
        type: "array"
        items:
          $ref: "#/definitions/AttachmentEntity"
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      success:
        type: "boolean"
    title: "AttachmentResponse"
  BandwidthModel:
    type: "object"
    properties:
      area:
        type: "string"
      backendEnable:
        type: "boolean"
      backendType:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      id:
        type: "integer"
        format: "int64"
      ip:
        type: "string"
      oldSystemBandwidthVolume:
        type: "string"
      oldSystemBandwidthVolumeUpdatedAt:
        type: "string"
        format: "date-time"
      packageDomDedi:
        type: "string"
      packageIntDedi:
        type: "string"
      packagePayg:
        type: "string"
      packageType:
        type: "string"
      projectUuid:
        type: "string"
      resourceType:
        type: "string"
      status:
        type: "string"
      totalVolume:
        type: "integer"
        format: "int64"
      trash:
        type: "integer"
        format: "int64"
      updatedAt:
        type: "string"
        format: "date-time"
      usedVolume:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      uuid:
        type: "string"
    title: "BandwidthModel"
  BandwidthPackageModel:
    type: "object"
    properties:
      area:
        type: "string"
      displayArea:
        type: "string"
      displayName:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      in:
        type: "integer"
        format: "int64"
      monthlyCost:
        type: "number"
        format: "double"
      name:
        type: "string"
      out:
        type: "integer"
        format: "int64"
      priceKey:
        type: "string"
      priceValue:
        type: "integer"
        format: "int64"
      type:
        type: "string"
      unit:
        type: "string"
      userType:
        type: "string"
      volume:
        type: "integer"
        format: "int64"
    title: "BandwidthPackageModel"
  BandwidthPackageResponse:
    type: "object"
    properties:
      bandwidthPackage:
        $ref: "#/definitions/BandwidthPackageModel"
      bandwidthPackages:
        type: "array"
        items:
          $ref: "#/definitions/BandwidthPackageModel"
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      success:
        type: "boolean"
    title: "BandwidthPackageResponse"
  BandwidthResourceIpResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      resourceIps:
        type: "array"
        items:
          $ref: "#/definitions/ResourceIp"
      success:
        type: "boolean"
    title: "BandwidthResourceIpResponse"
  BandwidthResponse:
    type: "object"
    properties:
      bandwidth:
        $ref: "#/definitions/BandwidthModel"
      bandwidths:
        type: "array"
        items:
          $ref: "#/definitions/BandwidthModel"
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      success:
        type: "boolean"
    title: "BandwidthResponse"
  BandwidthTrafficHistoryModel:
    type: "object"
    properties:
      bandwidthUuid:
        type: "string"
      createdAt:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      remainVolume:
        type: "integer"
        format: "int64"
      updatedAt:
        type: "string"
        format: "date-time"
      usedVolume:
        type: "integer"
        format: "int64"
    title: "BandwidthTrafficHistoryModel"
  BandwidthTrafficResponse:
    type: "object"
    properties:
      bandwidthTrafficHistories:
        type: "array"
        items:
          $ref: "#/definitions/BandwidthTrafficHistoryModel"
      bandwidthTrafficHistory:
        $ref: "#/definitions/BandwidthTrafficHistoryModel"
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      success:
        type: "boolean"
    title: "BandwidthTrafficResponse"
  BaseResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      success:
        type: "boolean"
    title: "BaseResponse"
  CallbackResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      success:
        type: "boolean"
      total:
        type: "integer"
        format: "int32"
    title: "CallbackResponse"
  ChangeSecGroupRequest:
    type: "object"
    required:
    - "serverId"
    properties:
      securityGroup:
        type: "array"
        example:
        - "secg-5c1e8e96-d106-4a91-8047-a76d1ae5ba9b"
        description: "Id of the SecGroups"
        items:
          type: "string"
      serverId:
        type: "string"
        example: "ins-a332cc50-8e24-4a45-ad9f-4136c7358503"
        description: "Id of server"
    title: "ChangeSecGroupRequest"
    description: "Update Server Request"
    example:
      securityGroup:
      - "secg-5c1e8e96-d106-4a91-8047-a76d1ae5ba9b"
      serverId: "ins-a332cc50-8e24-4a45-ad9f-4136c7358503"
  ChangeTypeBandwidthRequest:
    type: "object"
    properties:
      dediDomPackageName:
        type: "string"
      dediIntPackageName:
        type: "string"
      ip:
        type: "string"
      updateTimestamp:
        type: "boolean"
      uuid:
        type: "string"
    title: "ChangeTypeBandwidthRequest"
    example:
      dediIntPackageName: "dediIntPackageName"
      ip: "ip"
      uuid: "uuid"
      dediDomPackageName: "dediDomPackageName"
      updateTimestamp: true
  Code:
    type: "object"
    properties:
      description:
        type: "string"
      key:
        type: "string"
      value:
        type: "string"
    title: "Code"
  CreateAddressPairRequest:
    type: "object"
    required:
    - "networkInterfaceUuid"
    - "projectUuid"
    - "virtualIPUuid"
    properties:
      networkInterfaceUuid:
        type: "string"
        example: "net-in-617fbb01-df70-4bd1-b7c7-8c848259cd5f"
        description: "Uuid of the network interface"
      projectUuid:
        type: "string"
        example: "pro-11dd35af-8349-4441-b34e-0a969f6aeb1a"
        description: "Uuid of the project "
      virtualIPUuid:
        type: "string"
        example: "vip-e11c3820-5e70-41d0-8827-ec24315f835b"
        description: "Uuid of the virtual IP Address"
    title: "CreateAddressPairRequest"
    example:
      virtualIPUuid: "vip-e11c3820-5e70-41d0-8827-ec24315f835b"
      networkInterfaceUuid: "net-in-617fbb01-df70-4bd1-b7c7-8c848259cd5f"
      projectUuid: "pro-11dd35af-8349-4441-b34e-0a969f6aeb1a"
  CreateBandwidthRequest:
    type: "object"
    required:
    - "ip"
    - "packageNameDom"
    - "packageNameInt"
    - "packageNamePayG"
    - "packageType"
    - "resourceType"
    properties:
      description:
        type: "string"
        description: "Description of Bandwidth"
      ip:
        type: "string"
        example: "10.10.10.10"
        description: "Ip of Bandwidth"
      packageNameDom:
        type: "string"
        example: "BW_D200"
        description: "Package Name Dom of Bandwidth"
      packageNameInt:
        type: "string"
        example: "BW_Int5"
        description: "Package Name Int of Bandwidth"
      packageNamePayG:
        type: "string"
        example: "BW_TN15000"
        description: "Package Name Pay Type of Bandwidth"
      packageType:
        type: "string"
        example: "pay_as_you_go"
        description: "Package Type of Bandwidth"
      resourceType:
        type: "string"
        example: "elastic_ip"
        description: "Resource Type of Bandwidth"
    title: "CreateBandwidthRequest"
    description: "Create Bandwidth Request"
    example:
      packageNameDom: "BW_D200"
      packageNamePayG: "BW_TN15000"
      ip: "10.10.10.10"
      description: "description"
      packageNameInt: "BW_Int5"
      packageType: "pay_as_you_go"
      resourceType: "elastic_ip"
  CreateHealthMonitorRequest:
    type: "object"
    required:
    - "healthCheckProtocol"
    - "healthyThreshold"
    - "interval"
    - "timeout"
    - "unhealthyThreshold"
    properties:
      healthCheckMethod:
        type: "string"
        example: "GET"
        description: "Health check method for the HTTP protocol."
      healthCheckPath:
        type: "string"
        example: "/"
        description: "Health check path for the HTTP protocol."
      healthCheckProtocol:
        type: "string"
        example: "TCP"
        description: "Protocol for performing health check. The protocol can be TCP\
          \ or HTTP."
      healthyThreshold:
        type: "integer"
        format: "int64"
        example: 3
        description: "Healthy threshold. The value must be in range from 2 to 10."
      interval:
        type: "integer"
        format: "int64"
        example: 30
        description: "Health check interval. The value must be from 5 to 3600 seconds."
      successCode:
        type: "string"
        example: "200"
        description: "Health check success code for HTTP health check protocol."
      timeout:
        type: "integer"
        format: "int64"
        example: 5
        description: "Timeout of health check. The value must be from 2 to 120 seconds"
      unhealthyThreshold:
        type: "integer"
        format: "int64"
        example: 3
        description: "Unhealthy threshold. The value must be in range from 2 to 10."
    title: "CreateHealthMonitorRequest"
    example:
      healthCheckPath: "/"
      unhealthyThreshold: 3
      healthCheckMethod: "GET"
      interval: 30
      healthyThreshold: 3
      healthCheckProtocol: "TCP"
      timeout: 5
      successCode: "200"
  CreateL7PolicyRequest:
    type: "object"
    required:
    - "action"
    - "compareType"
    - "name"
    - "type"
    properties:
      action:
        type: "string"
        description: "Action. This indicates how the listener will route traffic.\
          \ The value can be REDIRECT_TO_POOL or REDIRECT_TO_URL."
      compareType:
        type: "string"
        description: "Compare operation. The value can be CONTAINS or EQUAL_TO"
      keepQueryString:
        type: "boolean"
        description: "Keep the query string or not."
      listenerId:
        type: "string"
        description: "Listener's ID."
      name:
        type: "string"
        description: "Policy name. Only letters (a-z, A-Z, 0-9, '_', '.') are allowed\
          \ and your input data must be between 6 and 20 characters."
      redirectHttpCode:
        type: "integer"
        format: "int32"
        description: "Redirect HTTP code for redirecting to other URL."
      redirectPoolId:
        type: "string"
        description: "Pool for forwarding."
      redirectUrl:
        type: "string"
        description: "URL for forwarding."
      type:
        type: "string"
        description: "Which attribute to compare. The value can be PATH or HOST_NAME"
      value:
        type: "string"
        description: "The value to compare with attribute."
    title: "CreateL7PolicyRequest"
    example:
      listenerId: "listenerId"
      compareType: "compareType"
      redirectUrl: "redirectUrl"
      redirectPoolId: "redirectPoolId"
      name: "name"
      redirectHttpCode: 0
      action: "action"
      keepQueryString: true
      type: "type"
      value: "value"
  CreateListenerRequest:
    type: "object"
    required:
    - "allowedCidrs"
    - "listenerName"
    - "listenerProtocol"
    - "listenerProtocolPort"
    - "timeoutClient"
    - "timeoutConnection"
    - "timeoutMember"
    properties:
      allowedCidrs:
        type: "string"
        example: "0.0.0.0/0"
        description: "Allowed cidr."
      certificateAuthorities:
        type: "array"
        description: "List of certificate authority"
        items:
          type: "string"
      defaultCertificateAuthority:
        type: "string"
        description: "Default certificate authority that the listener will use"
      defaultPoolId:
        type: "string"
        description: "Id of the pool that this listener will forward to."
      listenerName:
        type: "string"
        example: "This_is_listener"
        description: "Name of the listener. Only letters (a-z, A-Z, 0-9, '_', '.')\
          \ are allowed and your input data must be between 6 and 20 characters."
      listenerProtocol:
        type: "string"
        example: "HTTP"
        description: "Protocol of the listener."
      listenerProtocolPort:
        type: "integer"
        format: "int32"
        example: 80
        description: "Port of the listener."
      loadBalancerId:
        type: "string"
        description: "Id of the load balancer."
      timeoutClient:
        type: "integer"
        format: "int32"
        example: 50
        description: "Idle timeout of client. The value can be in range from 1 to\
          \ 3600 seconds"
      timeoutConnection:
        type: "integer"
        format: "int32"
        example: 5
        description: "Idle timeout of connection. The value can be in range from 1\
          \ to 3600 seconds"
      timeoutMember:
        type: "integer"
        format: "int32"
        example: 50
        description: "Idle timeout of member. The value can be in range from 1 to\
          \ 3600 seconds"
    title: "CreateListenerRequest"
    example:
      loadBalancerId: "loadBalancerId"
      certificateAuthorities:
      - "certificateAuthorities"
      - "certificateAuthorities"
      defaultCertificateAuthority: "defaultCertificateAuthority"
      listenerName: "This_is_listener"
      listenerProtocol: "HTTP"
      listenerProtocolPort: 80
      timeoutClient: 50
      defaultPoolId: "defaultPoolId"
      allowedCidrs: "0.0.0.0/0"
      timeoutConnection: 5
      timeoutMember: 50
  CreateLoadBalancerRequest:
    type: "object"
    required:
    - "name"
    - "scheme"
    properties:
      algorithm:
        type: "string"
        example: "ROUND_ROBIN"
        description: "Algorithm of the pool. The algorithm can be \"ROUND_ROBIN\"\
          \ or \"LEAST_CONNECTIONS\" or \"SOURCE_IP\""
      allowedCidrs:
        type: "string"
        example: "0.0.0.0/0"
        description: "Allowed cidr."
      certificateAuthorities:
        type: "array"
        description: "List of certificate authority"
        items:
          type: "string"
      defaultCertificateAuthority:
        type: "string"
        description: "Default certificate authority that the listener will use"
      healthCheckMethod:
        type: "string"
        example: "GET"
        description: "Health check method for the HTTP protocol."
      healthCheckPath:
        type: "string"
        example: "/"
        description: "Health check path for the HTTP protocol."
      healthCheckProtocol:
        type: "string"
        example: "TCP"
        description: "Protocol for performing health check. The protocol can be TCP\
          \ or HTTP."
      healthyThreshold:
        type: "integer"
        format: "int64"
        example: 3
        description: "Healthy threshold. The value must be in range from 2 to 10."
      interval:
        type: "integer"
        format: "int64"
        example: 30
        description: "Health check interval. The value must be from 5 to 3600 seconds."
      listenerName:
        type: "string"
        example: "This_is_listener"
        description: "Name of the listener. Only letters (a-z, A-Z, 0-9, '_', '.')\
          \ are allowed and your input data must be between 6 and 20 characters."
      listenerProtocol:
        type: "string"
        example: "HTTP"
        description: "Protocol of the listener."
      listenerProtocolPort:
        type: "integer"
        format: "int32"
        example: 80
        description: "Port of the listener."
      members:
        type: "array"
        description: "List of members of the pool."
        items:
          $ref: "#/definitions/CreateMemberRequest"
      name:
        type: "string"
        example: "This_is_a_lb"
        description: "Load balancer's name. Only letters (a-z, A-Z, 0-9, '_', '.')\
          \ are allowed and your input data must be between 6 and 20 characters."
      packageId:
        type: "string"
        example: "f8e62cf2-d84c-11e9-8a34-2a2ae2dbcce4"
        description: "Package ID of the load balancer."
      poolName:
        type: "string"
        example: "This_is_a_pool"
        description: "Name of the pool. Only letters (a-z, A-Z, 0-9, '_', '.') are\
          \ allowed and your input data must be between 6 and 20 characters."
      poolProtocol:
        type: "string"
        example: "HTTP"
        description: "Protocol of the pool."
      scheme:
        type: "string"
        example: "Internet"
        description: "Schema of the load balancer, it may be Internet or Internal."
      stickiness:
        type: "boolean"
        example: true
        description: "Enable sticky sessions."
      subnetId:
        type: "string"
        example: "sub-375e0685-f828-40bc-b8e9-53271fd7860d"
        description: "Subnet ID for the load balancer."
      successCode:
        type: "string"
        example: "200"
        description: "Health check success code for HTTP health check protocol."
      timeout:
        type: "integer"
        format: "int64"
        example: 5
        description: "Timeout of health check. The value must be from 2 to 120 seconds"
      timeoutClient:
        type: "integer"
        format: "int32"
        example: 50
        description: "Idle timeout of client. The value can be in range from 1 to\
          \ 3600 seconds"
      timeoutConnection:
        type: "integer"
        format: "int32"
        example: 5
        description: "Idle timeout of connection. The value can be in range from 1\
          \ to 3600 seconds"
      timeoutMember:
        type: "integer"
        format: "int32"
        example: 50
        description: "Idle timeout of member. The value can be in range from 1 to\
          \ 3600 seconds"
      type:
        type: "string"
        example: "Layer 7"
        description: "Type of the load balancer. It may be Layer 4 or Layer 7"
      unhealthyThreshold:
        type: "integer"
        format: "int64"
        example: 3
        description: "Unhealthy threshold. The value must be in range from 2 to 10."
    title: "CreateLoadBalancerRequest"
    example:
      subnetId: "sub-375e0685-f828-40bc-b8e9-53271fd7860d"
      scheme: "Internet"
      stickiness: true
      type: "Layer 7"
      allowedCidrs: "0.0.0.0/0"
      healthCheckProtocol: "TCP"
      timeout: 5
      successCode: "200"
      defaultCertificateAuthority: "defaultCertificateAuthority"
      listenerName: "This_is_listener"
      listenerProtocol: "HTTP"
      members:
      - subnetId: "subnetId"
        backup: false
        port: 80
        ipAddress: "192.168.0.1"
        name: "name"
        weight: 1
        monitorPort: 1000
      - subnetId: "subnetId"
        backup: false
        port: 80
        ipAddress: "192.168.0.1"
        name: "name"
        weight: 1
        monitorPort: 1000
      unhealthyThreshold: 3
      healthyThreshold: 3
      algorithm: "ROUND_ROBIN"
      poolName: "This_is_a_pool"
      packageId: "f8e62cf2-d84c-11e9-8a34-2a2ae2dbcce4"
      poolProtocol: "HTTP"
      timeoutConnection: 5
      healthCheckPath: "/"
      certificateAuthorities:
      - "certificateAuthorities"
      - "certificateAuthorities"
      listenerProtocolPort: 80
      name: "This_is_a_lb"
      timeoutClient: 50
      healthCheckMethod: "GET"
      interval: 30
      timeoutMember: 50
  CreateMemberRequest:
    type: "object"
    required:
    - "backup"
    - "ipAddress"
    - "port"
    - "subnetId"
    properties:
      backup:
        type: "boolean"
        example: false
        description: "Enable backup."
      ipAddress:
        type: "string"
        example: "192.168.0.1"
        description: "IP address of the server."
      monitorPort:
        type: "integer"
        format: "int32"
        example: 1000
        description: "Port for monitoring the member."
      name:
        type: "string"
        description: "Friendly name for the member to be recognizable."
      port:
        type: "integer"
        format: "int32"
        example: 80
        description: "Port of the server to handle request."
      subnetId:
        type: "string"
        description: "Subnet ID of the server."
      weight:
        type: "integer"
        format: "int32"
        example: 1
        description: "Weight for the member. Higher weight will make that member receive\
          \ more requests."
    title: "CreateMemberRequest"
    example:
      subnetId: "subnetId"
      backup: false
      port: 80
      ipAddress: "192.168.0.1"
      name: "name"
      weight: 1
      monitorPort: 1000
  CreateNetworkAclRequest:
    type: "object"
    required:
    - "name"
    - "vpc"
    properties:
      name:
        type: "string"
        example: "Default"
        description: "Name of The Network Acl table"
      vpc:
        type: "string"
        example: "net-7e9d494c-7127-48c8-8cd9-a954d37dfd65"
        description: "Uuid of The VPC"
    title: "CreateNetworkAclRequest"
    example:
      name: "Default"
      vpc: "net-7e9d494c-7127-48c8-8cd9-a954d37dfd65"
  CreateNetworkInterfaceRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "network-interface"
        description: "Name of network interface"
    title: "CreateNetworkInterfaceRequest"
    description: "Create Network Interface Request"
    example:
      name: "network-interface"
  CreateNetworkRequest:
    type: "object"
    required:
    - "cidr"
    - "name"
    properties:
      cidr:
        type: "string"
        example: "10.2.0.0/16"
        description: "Subnet of Network (/16)."
      name:
        type: "string"
        example: "Network_01"
        description: "Name of the Network"
    title: "CreateNetworkRequest"
    description: "Create Network Request"
    example:
      name: "Network_01"
      cidr: "10.2.0.0/16"
  CreatePoolRequest:
    type: "object"
    required:
    - "algorithm"
    - "poolName"
    - "poolProtocol"
    properties:
      algorithm:
        type: "string"
        example: "ROUND_ROBIN"
        description: "Algorithm of the pool. The algorithm can be \"ROUND_ROBIN\"\
          \ or \"LEAST_CONNECTIONS\" or \"SOURCE_IP\""
      healthMonitor:
        description: "Request for creating health check monitor."
        $ref: "#/definitions/CreateHealthMonitorRequest"
      loadBalancerId:
        type: "string"
        description: "Id of the load balancer."
      members:
        type: "array"
        description: "List of members of the pool."
        items:
          $ref: "#/definitions/CreateMemberRequest"
      poolName:
        type: "string"
        example: "This_is_a_pool"
        description: "Name of the pool. Only letters (a-z, A-Z, 0-9, '_', '.') are\
          \ allowed and your input data must be between 6 and 20 characters."
      poolProtocol:
        type: "string"
        example: "HTTP"
        description: "Protocol of the pool."
      stickiness:
        type: "boolean"
        example: true
        description: "Enable sticky sessions."
    title: "CreatePoolRequest"
    example:
      loadBalancerId: "loadBalancerId"
      healthMonitor:
        healthCheckPath: "/"
        unhealthyThreshold: 3
        healthCheckMethod: "GET"
        interval: 30
        healthyThreshold: 3
        healthCheckProtocol: "TCP"
        timeout: 5
        successCode: "200"
      stickiness: true
      members:
      - subnetId: "subnetId"
        backup: false
        port: 80
        ipAddress: "192.168.0.1"
        name: "name"
        weight: 1
        monitorPort: 1000
      - subnetId: "subnetId"
        backup: false
        port: 80
        ipAddress: "192.168.0.1"
        name: "name"
        weight: 1
        monitorPort: 1000
      poolProtocol: "HTTP"
      algorithm: "ROUND_ROBIN"
      poolName: "This_is_a_pool"
  CreateRouteTableRequest:
    type: "object"
    required:
    - "name"
    - "vpcUuid"
    properties:
      name:
        type: "string"
        example: "Default"
        description: "Name of The route table"
      vpcUuid:
        type: "string"
        example: "net-7e9d494c-7127-48c8-8cd9-a954d37dfd65"
        description: "Uuid of The VPC"
    title: "CreateRouteTableRequest"
    example:
      name: "Default"
      vpcUuid: "net-7e9d494c-7127-48c8-8cd9-a954d37dfd65"
  CreateSSHKeyRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "SSH_Key"
        description: "Name of the SSH key"
    title: "CreateSSHKeyRequest"
  CreateSecurityGroupRequest:
    type: "object"
    required:
    - "name"
    properties:
      description:
        type: "string"
        description: "description for secgroup."
      name:
        type: "string"
        example: "Secgroup_01"
        description: "Name of the Secgroup"
    title: "CreateSecurityGroupRequest"
    example:
      name: "Secgroup_01"
      description: "description"
  CreateSecurityGroupRuleRequest:
    type: "object"
    required:
    - "direction"
    - "etherType"
    - "portRangeMax"
    - "portRangeMin"
    - "protocol"
    - "remoteIpPrefix"
    - "securityGroupId"
    properties:
      description:
        type: "string"
        description: "Description for security group rule."
      direction:
        type: "string"
        example: "egress"
        description: "\"ingress\" or \"egress\""
      etherType:
        type: "string"
        example: "IPv4"
        description: "\"IPv4\" or \"IPv6\""
      portRangeMax:
        type: "integer"
        format: "int32"
        example: 65335
        description: "Upper bound of range port."
      portRangeMin:
        type: "integer"
        format: "int32"
        example: 0
        description: "Lower bound of range port."
      protocol:
        type: "string"
        example: "TCP"
        description: "\"TCP\", \"UDP\", \"ICMP\", ... "
      remoteIpPrefix:
        type: "string"
        example: "169.60.20.0/24"
        description: "Ip Prefix of source/target."
      securityGroupId:
        type: "string"
        example: "secg-017806c4-112e-46e5-bf12-74d02b86a267"
        description: "Id of security group that rules are attached."
    title: "CreateSecurityGroupRuleRequest"
    example:
      securityGroupId: "secg-017806c4-112e-46e5-bf12-74d02b86a267"
      portRangeMin: 0
      protocol: "TCP"
      etherType: "IPv4"
      description: "description"
      portRangeMax: 65335
      remoteIpPrefix: "169.60.20.0/24"
      direction: "egress"
  CreateServerGroupRequest:
    type: "object"
    required:
    - "name"
    - "policyId"
    properties:
      description:
        type: "string"
        example: "This is my server group"
        description: "Description of server group"
      name:
        type: "string"
        example: "Group-01"
        description: "Name of the server group"
      policyId:
        type: "string"
        example: "7916f5ac-cff2-11eb-b8bc-0242ac130003"
        description: "Policy id of server group"
    title: "CreateServerGroupRequest"
    description: "Create Server Group Request"
    example:
      policyId: "7916f5ac-cff2-11eb-b8bc-0242ac130003"
      name: "Group-01"
      description: "This is my server group"
  CreateServerRequest:
    type: "object"
    required:
    - "encryptionVolume"
    - "flavorId"
    - "imageId"
    - "name"
    - "networkId"
    - "rootDiskSize"
    - "rootDiskTypeId"
    - "subnetId"
    properties:
      attachFloating:
        type: "boolean"
        example: false
        description: "Attach floating IP"
      dataDiskEncryptionType:
        type: "string"
        example: "aes-xts-plain64_256"
        description: "Type encryption of data volume"
      dataDiskName:
        type: "string"
        example: "volume data"
        description: "Name of data volume"
      dataDiskSize:
        type: "integer"
        format: "int32"
      dataDiskTypeId:
        type: "string"
        example: "vtype-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
        description: "Id of data volume type"
      encryptionVolume:
        type: "boolean"
        example: false
        description: "Encryption volume"
      expirePassword:
        type: "boolean"
        example: true
        description: "Skip change password: false, else: true"
      flavorId:
        type: "string"
        example: "flav-c41b827e-730a-475f-b181-c0d1c7acc6d4"
        description: "Id of the flavor"
      imageId:
        type: "string"
        example: "img-5c6639ad-8b02-4402-8be4-5bc0c6a57d32"
        description: "Id of the image"
      name:
        type: "string"
        example: "Server_01"
        description: "Name of the server"
      networkId:
        type: "string"
        example: "net-d1314dfd-31ac-4b5f-ad9a-a5a489ecfa5d"
        description: "Id of the network"
      osLicence:
        type: "boolean"
        example: false
        description: "Licence of OS"
      rootDiskEncryptionType:
        type: "string"
        example: "aes-xts-plain64_256"
        description: "Type encryption of boot volume"
      rootDiskSize:
        type: "integer"
        format: "int32"
        example: 20
        description: "Size of boot volume"
      rootDiskTypeId:
        type: "string"
        example: "vtype-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
        description: "Id of boot volume type"
      securityGroup:
        type: "array"
        example:
        - "secg-5c1e8e96-d106-4a91-8047-a76d1ae5ba9b"
        description: "Id of the SecGroups"
        items:
          type: "string"
      serverGroupId:
        type: "string"
        example: "server-group-d4d6a036-1955-4c5f-a40d-e789d26cf49d"
        description: "Server group id"
      sshKeyId:
        type: "string"
        example: "SSH_Key"
        description: "Id of SSH key"
      subnetId:
        type: "string"
        example: "sub-b7716e75-10fa-4d18-9987-d68273f49386"
        description: "Id of the subnet"
      userData:
        type: "string"
        description: "User data"
      userDataBase64Encoded:
        type: "boolean"
        description: "User data has already been base64 encoded"
      userName:
        type: "string"
        example: "stackops"
        description: "name of user"
      userPassword:
        type: "string"
        example: "password"
        description: "password of user"
    title: "CreateServerRequest"
    description: "Create Server Request"
    example:
      dataDiskSize: 0
      subnetId: "sub-b7716e75-10fa-4d18-9987-d68273f49386"
      userDataBase64Encoded: true
      userPassword: "password"
      imageId: "img-5c6639ad-8b02-4402-8be4-5bc0c6a57d32"
      userData: "userData"
      dataDiskTypeId: "vtype-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
      attachFloating: false
      rootDiskSize: 20
      flavorId: "flav-c41b827e-730a-475f-b181-c0d1c7acc6d4"
      serverGroupId: "server-group-d4d6a036-1955-4c5f-a40d-e789d26cf49d"
      securityGroup:
      - "secg-5c1e8e96-d106-4a91-8047-a76d1ae5ba9b"
      userName: "stackops"
      sshKeyId: "SSH_Key"
      osLicence: false
      rootDiskTypeId: "vtype-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
      encryptionVolume: false
      expirePassword: true
      dataDiskName: "volume data"
      name: "Server_01"
      rootDiskEncryptionType: "aes-xts-plain64_256"
      networkId: "net-d1314dfd-31ac-4b5f-ad9a-a5a489ecfa5d"
      dataDiskEncryptionType: "aes-xts-plain64_256"
  CreateSubnetRequest:
    type: "object"
    required:
    - "cidr"
    - "name"
    properties:
      cidr:
        type: "string"
        example: "10.2.12.0/24"
        description: "CIDR of Subnet, must be contained in its network."
      name:
        type: "string"
        example: "Subnet_01"
        description: "Name of the Subnet"
    title: "CreateSubnetRequest"
    example:
      name: "Subnet_01"
      cidr: "10.2.12.0/24"
  CreateUserImageRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "image1"
        description: "Name of image"
    title: "CreateUserImageRequest"
    description: "Create User Image Request"
    example:
      name: "image1"
  CreateVirtualIpAddressRequest:
    type: "object"
    required:
    - "name"
    - "networkUuid"
    - "subnetUuid"
    properties:
      description:
        type: "string"
        description: "description for Virtual IP Address."
      name:
        type: "string"
        example: "VIP Address 01"
        description: "Name of the Virtual IP Address"
      networkUuid:
        type: "string"
        example: "net-7e9d494c-7127-48c8-8cd9-a954d37dfd65"
        description: "Uuid of the network"
      subnetUuid:
        type: "string"
        example: "sub-cfcd4f3f-4077-4923-9bf9-d19cb17f4f0b"
        description: "Uuid of the subnet"
    title: "CreateVirtualIpAddressRequest"
    example:
      subnetUuid: "sub-cfcd4f3f-4077-4923-9bf9-d19cb17f4f0b"
      name: "VIP Address 01"
      description: "description"
      networkUuid: "net-7e9d494c-7127-48c8-8cd9-a954d37dfd65"
  CreateVolumeRequest:
    type: "object"
    required:
    - "name"
    - "size"
    - "volumeTypeId"
    properties:
      encryptionType:
        type: "string"
        example: "aes-xts-plain64_256"
        description: "Type encryption of volume"
      imageId:
        type: "string"
        example: "img-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
        description: "Id of image"
      multiAttach:
        type: "boolean"
        example: true
        description: "Multi attach volume or not"
      name:
        type: "string"
        example: "Volume"
        description: "Name of the volume"
      size:
        type: "integer"
        format: "int32"
        example: 20
        description: "Size of volume"
      volumeTypeId:
        type: "string"
        example: "vtype-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
        description: "Id of volume type"
    title: "CreateVolumeRequest"
    description: "Create Volume Request"
    example:
      imageId: "img-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
      multiAttach: true
      size: 20
      volumeTypeId: "vtype-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
      encryptionType: "aes-xts-plain64_256"
      name: "Volume"
  DataDiskLimit:
    type: "object"
    properties:
      maxIOPS:
        type: "integer"
        format: "int32"
      maxSize:
        type: "integer"
        format: "int32"
      minSize:
        type: "integer"
        format: "int32"
    title: "DataDiskLimit"
  DataResponse:
    type: "object"
    properties:
      data:
        type: "object"
        properties: {}
    title: "DataResponse"
  DataResponse«HealthMonitor»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/HealthMonitor"
    title: "DataResponse«HealthMonitor»"
  DataResponse«JSONObject»:
    type: "object"
    properties:
      data:
        type: "object"
        additionalProperties:
          type: "object"
          properties: {}
    title: "DataResponse«JSONObject»"
  DataResponse«L7Policy»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/L7Policy"
    title: "DataResponse«L7Policy»"
  DataResponse«Listener»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Listener"
    title: "DataResponse«Listener»"
  DataResponse«List«AddressPairDto»»:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/AddressPairDto"
    title: "DataResponse«List«AddressPairDto»»"
  DataResponse«List«InternalNetworkInterfaceDto»»:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/InternalNetworkInterfaceDto"
    title: "DataResponse«List«InternalNetworkInterfaceDto»»"
  DataResponse«List«QuotaUsedDto»»:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/QuotaUsedDto"
    title: "DataResponse«List«QuotaUsedDto»»"
  DataResponse«List«SecgroupruleDto»»:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/SecgroupruleDto"
    title: "DataResponse«List«SecgroupruleDto»»"
  DataResponse«List«SecurityGroupRulesSampleEntity»»:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/SecurityGroupRulesSampleEntity"
    title: "DataResponse«List«SecurityGroupRulesSampleEntity»»"
  DataResponse«List«ServerAction»»:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/ServerAction"
    title: "DataResponse«List«ServerAction»»"
  DataResponse«List«ServerGroupPolicy»»:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/ServerGroupPolicy"
    title: "DataResponse«List«ServerGroupPolicy»»"
  DataResponse«List«ServerOfSecgroupDto»»:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          $ref: "#/definitions/ServerOfSecgroupDto"
    title: "DataResponse«List«ServerOfSecgroupDto»»"
  DataResponse«List«string»»:
    type: "object"
    properties:
      data:
        type: "array"
        items:
          type: "string"
    title: "DataResponse«List«string»»"
  DataResponse«LoadBalancer»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/LoadBalancer"
    title: "DataResponse«LoadBalancer»"
  DataResponse«NetworkDto»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/NetworkDto"
    title: "DataResponse«NetworkDto»"
  DataResponse«NetworkInterfaceElastic»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/NetworkInterfaceElastic"
    title: "DataResponse«NetworkInterfaceElastic»"
  DataResponse«Pool»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Pool"
    title: "DataResponse«Pool»"
  DataResponse«SSHKeyDto»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SSHKeyDto"
    title: "DataResponse«SSHKeyDto»"
  DataResponse«SecgroupDto»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SecgroupDto"
    title: "DataResponse«SecgroupDto»"
  DataResponse«SecgroupEntity»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SecgroupEntity"
    title: "DataResponse«SecgroupEntity»"
  DataResponse«SecgroupRuleEntity»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SecgroupRuleEntity"
    title: "DataResponse«SecgroupRuleEntity»"
  DataResponse«SecgroupruleDto»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SecgroupruleDto"
    title: "DataResponse«SecgroupruleDto»"
  DataResponse«ServerGroupDto»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/ServerGroupDto"
    title: "DataResponse«ServerGroupDto»"
  DataResponse«ServerNetworkInterfaceDetail»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/ServerNetworkInterfaceDetail"
    title: "DataResponse«ServerNetworkInterfaceDetail»"
  DataResponse«ServerSecGroupDetail»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/ServerSecGroupDetail"
    title: "DataResponse«ServerSecGroupDetail»"
  DataResponse«Server»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Server"
    title: "DataResponse«Server»"
  DataResponse«SimpleServer»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SimpleServer"
    title: "DataResponse«SimpleServer»"
  DataResponse«SubnetDto»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/SubnetDto"
    title: "DataResponse«SubnetDto»"
  DataResponse«VirtualIpAddressDto»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/VirtualIpAddressDto"
    title: "DataResponse«VirtualIpAddressDto»"
  DataResponse«VirtualIpAddressNetworkEntity»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/VirtualIpAddressNetworkEntity"
    title: "DataResponse«VirtualIpAddressNetworkEntity»"
  DataResponse«Volume»:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/Volume"
    title: "DataResponse«Volume»"
  DataResponse«string»:
    type: "object"
    properties:
      data:
        type: "string"
    title: "DataResponse«string»"
  DeleteBandwidthRequest:
    type: "object"
    required:
    - "id"
    - "ip"
    properties:
      id:
        type: "string"
        description: "Id of Bandwidth"
      ip:
        type: "string"
        example: "10.10.10.10"
        description: "Ip of Bandwidth"
    title: "DeleteBandwidthRequest"
    description: "Delete Bandwidth Request"
  DeleteL7PolicyRequest:
    type: "object"
    required:
    - "policyId"
    properties:
      policyId:
        type: "string"
        description: "Policy's id to delete"
    title: "DeleteL7PolicyRequest"
  DeleteListenerRequest:
    type: "object"
    required:
    - "listenerId"
    properties:
      listenerId:
        type: "string"
        description: "id of the listener to delete"
    title: "DeleteListenerRequest"
  DeleteLoadBalancerRequest:
    type: "object"
    required:
    - "loadBalancerId"
    properties:
      loadBalancerId:
        type: "string"
        description: "id of the load balancer to delete"
    title: "DeleteLoadBalancerRequest"
  DeleteNetworkRequest:
    type: "object"
    required:
    - "networkId"
    properties:
      networkId:
        type: "string"
        example: "net-e454fde0-de12-4f70-a5e6-2d904b850fa3"
        description: "Id of Network to be deleted."
    title: "DeleteNetworkRequest"
    description: "Delete Network Request"
  DeletePoolRequest:
    type: "object"
    required:
    - "poolId"
    properties:
      poolId:
        type: "string"
        description: "id of the pool to delete"
    title: "DeletePoolRequest"
  DeleteSSHKeyRequest:
    type: "object"
    properties:
      id:
        type: "string"
    title: "DeleteSSHKeyRequest"
  DeleteSecurityGroupRequest:
    type: "object"
    required:
    - "secgroupId"
    properties:
      secgroupId:
        type: "string"
        example: "secg-e454fde0-de12-4f70-a5e6-2d904b850fa3"
        description: "Id of Secgroup to be deleted."
    title: "DeleteSecurityGroupRequest"
  DeleteSecurityGroupRuleRequest:
    type: "object"
    required:
    - "secgroupRuleId"
    properties:
      secgroupRuleId:
        type: "string"
        example: "secr-e454fde0-de12-4f70-a5e6-2d904b850fa3"
        description: "Id of Secgroup rule to be deleted."
    title: "DeleteSecurityGroupRuleRequest"
  DeleteServerGroupRequest:
    type: "object"
    required:
    - "serverGroupId"
    properties:
      serverGroupId:
        type: "string"
        example: "server-group-e22afbe6-9a1e-4849-ad49-c00a9627b1ee"
        description: "Id of the server group"
    title: "DeleteServerGroupRequest"
    description: "Delete Server Group Request"
  DeleteServerRequest:
    type: "object"
    properties:
      deleteAllVolume:
        type: "boolean"
        description: "Delete all volume are attached"
    title: "DeleteServerRequest"
    description: "Delete Server Request"
  DeleteSubnetRequest:
    type: "object"
    required:
    - "networkId"
    - "subnetId"
    properties:
      extra:
        type: "object"
        properties: {}
      networkId:
        type: "string"
        example: "net-e454fde0-de12-4f70-a5e6-2d904b850fa3"
        description: "Id of Network to be deleted."
      subnetId:
        type: "string"
        example: "sub-e454fde0-de12-4f70-a5e6-2d904b850fa3"
        description: "Id of Subnet to be deleted."
    title: "DeleteSubnetRequest"
  DeleteVolumeRequest:
    type: "object"
    title: "DeleteVolumeRequest"
    description: "Delete Volume Request"
  DetachExternalNetworkInterfaceRequest:
    type: "object"
    properties:
      networkInterfaceId:
        type: "string"
        example: "net-a332cc50-8e24-4a45-ad9f-4136c7358503"
        description: "Network interface id"
    title: "DetachExternalNetworkInterfaceRequest"
    description: "Detach External Network Interface Request"
  DetachNetworkInterfaceRequest:
    type: "object"
    properties:
      networkInterfaceIds:
        type: "array"
        example:
        - "net-a332cc50-8e24-4a45-ad9f-4136c7358503"
        description: "List Id of network interface"
        items:
          type: "string"
    title: "DetachNetworkInterfaceRequest"
    description: "Detach Network Interface Request"
  DetachVolumeRequest:
    type: "object"
    title: "DetachVolumeRequest"
    description: "Detach Volume Request"
  EditSecurityGroupRequest:
    type: "object"
    required:
    - "name"
    properties:
      description:
        type: "string"
        description: "description for secgroup."
      name:
        type: "string"
        example: "Secgroup_01"
        description: "Name of the Secgroup"
    title: "EditSecurityGroupRequest"
    example:
      name: "Secgroup_01"
      description: "description"
  ElasticIpDetail:
    type: "object"
    properties:
      allocationType:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      elasticIpPackage:
        type: "integer"
        format: "int32"
      interfaceNetworkInterface:
        $ref: "#/definitions/InterfaceNetworkInterfaceEntity"
      interfacePublicIp:
        $ref: "#/definitions/InterfacePublicIpEntity"
      interfacePublicSubnet:
        $ref: "#/definitions/InterfacePublicSubnetEntity"
      name:
        type: "string"
      projectId:
        type: "string"
      publicIpId:
        type: "string"
      publicSubnetId:
        type: "string"
      status:
        type: "string"
      targetId:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      usageType:
        type: "string"
      uuid:
        type: "string"
      vpcId:
        type: "string"
      vpcName:
        type: "string"
    title: "ElasticIpDetail"
  ElasticIpEntity:
    type: "object"
    properties:
      allocationType:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      displayCreatedAt:
        type: "string"
      elasticIpPackage:
        type: "integer"
        format: "int32"
      id:
        type: "integer"
        format: "int32"
      interfaceNetworkInterface:
        $ref: "#/definitions/InterfaceNetworkInterface"
      interfacePublicIp:
        $ref: "#/definitions/InterfacePublicIp"
      interfacePublicSubnet:
        $ref: "#/definitions/InterfacePublicSubnet"
      name:
        type: "string"
      projectId:
        type: "string"
      status:
        type: "string"
      targetId:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      usageType:
        type: "string"
      userService:
        $ref: "#/definitions/UserService"
      uuid:
        type: "string"
      vpcId:
        type: "string"
      vpcName:
        type: "string"
    title: "ElasticIpEntity"
  ElasticOfNetworkDto:
    type: "object"
    properties:
      allocationType:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      interfacePublicSubnet:
        $ref: "#/definitions/InterfacePublicSubnetDto"
      name:
        type: "string"
      usageType:
        type: "string"
      uuid:
        type: "string"
    title: "ElasticOfNetworkDto"
  EncryptionType:
    type: "object"
    properties:
      displayKey:
        type: "string"
      key:
        type: "string"
    title: "EncryptionType"
  Family:
    type: "object"
    properties:
      condition:
        $ref: "#/definitions/FamilyCondition"
      description:
        type: "string"
      key:
        type: "string"
      types:
        type: "array"
        items:
          $ref: "#/definitions/TypesItem"
      value:
        type: "string"
    title: "Family"
  FamilyCondition:
    type: "object"
    properties:
      codes:
        type: "array"
        items:
          type: "string"
    title: "FamilyCondition"
  Flavor:
    type: "object"
    properties:
      bandwidth:
        type: "integer"
        format: "int32"
      bandwidthUnit:
        type: "string"
      cpu:
        type: "integer"
        format: "int32"
      cpuPlatformDescription:
        type: "string"
      flavorId:
        type: "string"
      gpu:
        type: "integer"
        format: "int32"
      group:
        type: "string"
      memory:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      remainingVms:
        type: "integer"
        format: "int32"
      zoneId:
        type: "string"
    title: "Flavor"
  FlavorResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      flavors:
        type: "array"
        items:
          $ref: "#/definitions/Flavor"
      success:
        type: "boolean"
    title: "FlavorResponse"
  FlavorZone:
    type: "object"
    properties:
      description:
        type: "string"
      id:
        type: "string"
      name:
        type: "string"
    title: "FlavorZone"
  FlavorZoneResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      flavorZones:
        type: "array"
        items:
          $ref: "#/definitions/FlavorZone"
      success:
        type: "boolean"
    title: "FlavorZoneResponse"
  HealthMonitor:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      healthCheckMethod:
        type: "string"
      healthCheckPath:
        type: "string"
      healthCheckProtocol:
        type: "string"
      healthyThreshold:
        type: "integer"
        format: "int64"
      interval:
        type: "integer"
        format: "int64"
      poolId:
        type: "string"
      projectId:
        type: "string"
      provisioningStatus:
        type: "string"
      successCode:
        type: "string"
      timeout:
        type: "integer"
        format: "int64"
      unhealthyThreshold:
        type: "integer"
        format: "int64"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "HealthMonitor"
  ImportSSHKeyRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "SSH_Key"
        description: "Name of the SSH key"
      pubKey:
        type: "string"
    title: "ImportSSHKeyRequest"
  InterfaceK8SClusterDetail:
    type: "object"
    properties:
      aclId:
        type: "string"
      autoHealingEnabled:
        type: "boolean"
      autoMonitoringEnabled:
        type: "boolean"
      autoScalingEnabled:
        type: "boolean"
      backendStatus:
        type: "string"
      bootVolumeSize:
        type: "integer"
        format: "int32"
      bootVolumeTypeId:
        type: "string"
      calicoCidr:
        type: "string"
      clusterId:
        type: "integer"
        format: "int32"
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      dockerVolumeSize:
        type: "integer"
        format: "int32"
      dockerVolumeTypeId:
        type: "string"
      enabledLb:
        type: "boolean"
      endpoint:
        type: "string"
      etcdVolumeSize:
        type: "integer"
        format: "int32"
      etcdVolumeTypeId:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      ingressControllerEnabled:
        type: "boolean"
      k8sNetworkType:
        type: "string"
      k8sNetworkTypeId:
        type: "string"
      k8sVersion:
        type: "string"
      k8sVersionId:
        type: "string"
      masterCount:
        type: "integer"
        format: "int32"
      masterFlavorId:
        type: "string"
      masterFlavorName:
        type: "string"
      masterInstanceTypeId:
        type: "string"
      maxNodeCount:
        type: "integer"
        format: "int32"
      minNodeCount:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      networkId:
        type: "string"
      nodeCount:
        type: "integer"
        format: "int32"
      nodeFlavorId:
        type: "string"
      nodeFlavorName:
        type: "string"
      nodeInstanceTypeId:
        type: "string"
      projectId:
        type: "string"
      sshKeyId:
        type: "string"
      sshKeyName:
        type: "string"
      status:
        type: "string"
      subnetId:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "InterfaceK8SClusterDetail"
  InterfaceNetworkInterface:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      fixedIp:
        type: "string"
      floatingIp:
        type: "string"
      floatingIpId:
        type: "string"
      interfaceType:
        type: "string"
      mac:
        type: "string"
      networkUuid:
        type: "string"
      portUuid:
        type: "string"
      product:
        type: "string"
      serverUuid:
        type: "string"
      status:
        type: "string"
      subnetUuid:
        type: "string"
      type:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "InterfaceNetworkInterface"
  InterfaceNetworkInterfaceEntity:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      fixedIp:
        type: "string"
      floatingIp:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      interfaceId:
        type: "integer"
        format: "int32"
      interfaceType:
        type: "string"
      mac:
        type: "string"
      networkUuid:
        type: "string"
      portUuid:
        type: "string"
      product:
        type: "string"
      serverUuid:
        type: "string"
      status:
        type: "string"
      subnetUuid:
        type: "string"
      type:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "InterfaceNetworkInterfaceEntity"
  InterfaceProjectQuota:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      projectId:
        type: "string"
      quota:
        type: "string"
      type:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      used:
        type: "string"
      uuid:
        type: "string"
    title: "InterfaceProjectQuota"
  InterfaceProjectQuotaResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      interfaceProjectQuota:
        $ref: "#/definitions/InterfaceProjectQuota"
      success:
        type: "boolean"
    title: "InterfaceProjectQuotaResponse"
  InterfacePublicIp:
    type: "object"
    properties:
      backendStatus:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      gatewayIp:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      ip:
        type: "string"
      projectId:
        type: "string"
      status:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
      vpcBackendId:
        type: "integer"
        format: "int32"
    title: "InterfacePublicIp"
  InterfacePublicIpEntity:
    type: "object"
    properties:
      backendStatus:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      gatewayIp:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      ip:
        type: "string"
      projectId:
        type: "string"
      status:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
      vpcBackendId:
        type: "integer"
        format: "int32"
    title: "InterfacePublicIpEntity"
  InterfacePublicSubnet:
    type: "object"
    properties:
      backendStatus:
        type: "string"
      cidr:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      gatewayIp:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      projectId:
        type: "string"
      status:
        type: "string"
      subnetBackendId:
        type: "integer"
        format: "int32"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
      vpcBackendId:
        type: "integer"
        format: "int32"
    title: "InterfacePublicSubnet"
  InterfacePublicSubnetDto:
    type: "object"
    properties:
      backendStatus:
        type: "string"
      cidr:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      gatewayIp:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      projectId:
        type: "string"
      status:
        type: "string"
      subnetBackendId:
        type: "integer"
        format: "int32"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
      vpcBackendId:
        type: "integer"
        format: "int32"
    title: "InterfacePublicSubnetDto"
  InterfacePublicSubnetEntity:
    type: "object"
    properties:
      backendStatus:
        type: "string"
      cidr:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      gatewayIp:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      projectId:
        type: "string"
      status:
        type: "string"
      subnetBackendId:
        type: "integer"
        format: "int32"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
      vpcBackendId:
        type: "integer"
        format: "int32"
    title: "InterfacePublicSubnetEntity"
  InternalNetworkInterfaceDto:
    type: "object"
    properties:
      fixedIp:
        type: "string"
      subnetUuid:
        type: "string"
      uuid:
        type: "string"
    title: "InternalNetworkInterfaceDto"
  JSONObject:
    type: "object"
    title: "JSONObject"
    additionalProperties:
      type: "object"
      properties: {}
  L7Policy:
    type: "object"
    properties:
      action:
        type: "string"
      adminStateUp:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      keepQueryString:
        type: "boolean"
      l7Rule:
        $ref: "#/definitions/L7Rule"
      listenerId:
        type: "string"
      name:
        type: "string"
      operatingStatus:
        type: "string"
      position:
        type: "integer"
        format: "int64"
      projectId:
        type: "string"
      provisioningStatus:
        type: "string"
      redirectHttpCode:
        type: "integer"
        format: "int32"
      redirectPoolId:
        type: "string"
      redirectUrl:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "L7Policy"
  L7Rule:
    type: "object"
    properties:
      adminStateUp:
        type: "boolean"
      compareType:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      invert:
        type: "boolean"
      operatingStatus:
        type: "string"
      policyId:
        type: "string"
      projectId:
        type: "string"
      provisioningStatus:
        type: "string"
      ruleKey:
        type: "string"
      ruleType:
        type: "string"
      ruleValue:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "L7Rule"
  ListResourceIpRequest:
    type: "object"
    required:
    - "typeOfResources"
    properties:
      typeOfResources:
        type: "array"
        example: "server"
        description: "Types of resources. (if you want to get ips of all resources,\
          \ let it be null)"
        items:
          type: "string"
    title: "ListResourceIpRequest"
    description: "Get Resource Ips"
  ListRouteTablesResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      routeTables:
        type: "array"
        items:
          $ref: "#/definitions/RouteTableModel"
      success:
        type: "boolean"
    title: "ListRouteTablesResponse"
  Listener:
    type: "object"
    properties:
      adminStateUp:
        type: "boolean"
      allowedCidrs:
        type: "string"
      clientAuthenticationCertId:
        type: "string"
      connectionLimit:
        type: "integer"
        format: "int32"
      createdAt:
        type: "string"
        format: "date-time"
      defaultPoolId:
        type: "string"
      defaultTlsContainerRef:
        type: "string"
      description:
        type: "string"
      headers:
        type: "array"
        items:
          type: "string"
      loadBalancerId:
        type: "string"
      name:
        type: "string"
      operatingStatus:
        type: "string"
      projectId:
        type: "string"
      protocol:
        type: "string"
      protocolPort:
        type: "integer"
        format: "int32"
      provisioningStatus:
        type: "string"
      timeoutClient:
        type: "integer"
        format: "int32"
      timeoutConnection:
        type: "integer"
        format: "int32"
      timeoutMember:
        type: "integer"
        format: "int32"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "Listener"
  LoadBalancer:
    type: "object"
    properties:
      address:
        type: "string"
      adminStateUp:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      loadBalancerSchema:
        type: "string"
      name:
        type: "string"
      operatingStatus:
        type: "string"
      packageId:
        type: "string"
      privateSubnetCidr:
        type: "string"
      privateSubnetId:
        type: "string"
      projectId:
        type: "string"
      provisioningStatus:
        type: "string"
      subnetId:
        type: "string"
      type:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "LoadBalancer"
  LoadBalancerPackage:
    type: "object"
    properties:
      connectionNumber:
        type: "integer"
        format: "int32"
      dataTransfer:
        type: "integer"
        format: "int32"
      mode:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      uuid:
        type: "string"
    title: "LoadBalancerPackage"
  Member:
    type: "object"
    properties:
      address:
        type: "string"
      adminStateUp:
        type: "boolean"
      backup:
        type: "integer"
        format: "int32"
      createdAt:
        type: "string"
        format: "date-time"
      monitorPort:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      operatingStatus:
        type: "string"
      poolId:
        type: "string"
      projectId:
        type: "string"
      protocolPort:
        type: "integer"
        format: "int32"
      provisioningStatus:
        type: "string"
      subnetId:
        type: "string"
      typeCreate:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
      weight:
        type: "integer"
        format: "int32"
    title: "Member"
  Network:
    type: "object"
    properties:
      cidr:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      displayCreatedAt:
        type: "string"
      elasticIpEntities:
        type: "array"
        items:
          $ref: "#/definitions/ElasticIpEntity"
      id:
        type: "string"
      name:
        type: "string"
      status:
        type: "string"
      subnets:
        type: "array"
        items:
          $ref: "#/definitions/Subnet"
    title: "Network"
  NetworkAclListResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      networkAcls:
        type: "array"
        items:
          $ref: "#/definitions/NetworkAclModel"
      success:
        type: "boolean"
    title: "NetworkAclListResponse"
  NetworkAclModel:
    type: "object"
    properties:
      aclPolicyId:
        type: "string"
      aclPolicyRules:
        type: "array"
        items:
          $ref: "#/definitions/AclPolicyRule"
      createdAt:
        type: "string"
        format: "date-time"
      defaultAcl:
        type: "boolean"
      interfaceNetworkUuid:
        type: "string"
      name:
        type: "string"
      projectUuid:
        type: "string"
      status:
        type: "string"
      subnetAssociationList:
        type: "array"
        items:
          type: "string"
      uuid:
        type: "string"
    title: "NetworkAclModel"
  NetworkAclResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      networkAcl:
        $ref: "#/definitions/NetworkAclModel"
      success:
        type: "boolean"
    title: "NetworkAclResponse"
  NetworkDto:
    type: "object"
    properties:
      cidr:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      displayName:
        type: "string"
      elasticIps:
        type: "array"
        items:
          $ref: "#/definitions/ElasticOfNetworkDto"
      id:
        type: "string"
      status:
        type: "string"
    title: "NetworkDto"
  NetworkInterfaceElastic:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      elasticIpId:
        type: "string"
      ip:
        type: "string"
      name:
        type: "string"
      projectId:
        type: "string"
      serverId:
        type: "string"
      serverName:
        type: "string"
      status:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
      vpcId:
        type: "string"
      vpcName:
        type: "string"
    title: "NetworkInterfaceElastic"
  NetworkResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      networks:
        type: "array"
        items:
          $ref: "#/definitions/Network"
      success:
        type: "boolean"
    title: "NetworkResponse"
  OSImage:
    type: "object"
    properties:
      flavorZoneIds:
        type: "array"
        items:
          type: "string"
      id:
        type: "string"
      imageType:
        type: "string"
      imageVersion:
        type: "string"
      licence:
        type: "boolean"
      packageLimit:
        $ref: "#/definitions/PackageLimit"
    title: "OSImage"
  OSImageBaseResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      images:
        type: "array"
        items:
          $ref: "#/definitions/OSImage"
      success:
        type: "boolean"
    title: "OSImageBaseResponse"
  PackageLimit:
    type: "object"
    properties:
      cpu:
        type: "integer"
        format: "int32"
      diskSize:
        type: "integer"
        format: "int32"
      memory:
        type: "integer"
        format: "int32"
    title: "PackageLimit"
  Paging«ElasticIpDetail»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/ElasticIpDetail"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«ElasticIpDetail»"
  Paging«InterfaceK8SClusterDetail»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/InterfaceK8SClusterDetail"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«InterfaceK8SClusterDetail»"
  Paging«L7Policy»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/L7Policy"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«L7Policy»"
  Paging«Listener»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/Listener"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«Listener»"
  Paging«LoadBalancerPackage»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/LoadBalancerPackage"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«LoadBalancerPackage»"
  Paging«LoadBalancer»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/LoadBalancer"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«LoadBalancer»"
  Paging«Member»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/Member"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«Member»"
  Paging«NetworkDto»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/NetworkDto"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«NetworkDto»"
  Paging«NetworkInterfaceElastic»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/NetworkInterfaceElastic"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«NetworkInterfaceElastic»"
  Paging«Pool»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/Pool"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«Pool»"
  Paging«SSHKeyDto»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/SSHKeyDto"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«SSHKeyDto»"
  Paging«SecgroupDto»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/SecgroupDto"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«SecgroupDto»"
  Paging«ServerGroupDetail»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/ServerGroupDetail"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«ServerGroupDetail»"
  Paging«Server»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/Server"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«Server»"
  Paging«SimpleServer»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/SimpleServer"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«SimpleServer»"
  Paging«SimpleVolume»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/SimpleVolume"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«SimpleVolume»"
  Paging«UserImage»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/UserImage"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«UserImage»"
  Paging«VirtualIpAddressDto»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/VirtualIpAddressDto"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«VirtualIpAddressDto»"
  Paging«Volume»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/Volume"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«Volume»"
  Paging«WanIpDto»:
    type: "object"
    properties:
      listData:
        type: "array"
        items:
          $ref: "#/definitions/WanIpDto"
      page:
        type: "integer"
        format: "int32"
      pageSize:
        type: "integer"
        format: "int32"
      totalItem:
        type: "integer"
        format: "int64"
      totalPage:
        type: "integer"
        format: "int32"
    title: "Paging«WanIpDto»"
  Pool:
    type: "object"
    properties:
      adminStateUp:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      healthMonitor:
        $ref: "#/definitions/HealthMonitor"
      loadBalanceMethod:
        type: "string"
      loadBalancerId:
        type: "string"
      name:
        type: "string"
      operatingStatus:
        type: "string"
      projectId:
        type: "string"
      protocol:
        type: "string"
      provisioningStatus:
        type: "string"
      sessionPersistence:
        type: "integer"
        format: "int32"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "Pool"
  ProjectInfo:
    type: "object"
    properties:
      projectId:
        type: "string"
      userId:
        type: "integer"
        format: "int32"
    title: "ProjectInfo"
  ProjectResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      projects:
        type: "array"
        items:
          $ref: "#/definitions/ProjectInfo"
      success:
        type: "boolean"
    title: "ProjectResponse"
  Quota:
    type: "object"
    properties:
      description:
        type: "string"
      limit:
        type: "integer"
        format: "int64"
      projectUuid:
        type: "string"
      quotaName:
        type: "string"
      type:
        type: "string"
      used:
        type: "string"
    title: "Quota"
  QuotaResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      quotas:
        type: "array"
        items:
          $ref: "#/definitions/Quota"
      success:
        type: "boolean"
    title: "QuotaResponse"
  QuotaUsedDto:
    type: "object"
    properties:
      description:
        type: "string"
      limit:
        type: "integer"
        format: "int64"
      quotaName:
        type: "string"
      type:
        type: "string"
      used:
        type: "string"
    title: "QuotaUsedDto"
  RecoverBandwidthRequest:
    type: "object"
    properties:
      ip:
        type: "string"
      uuid:
        type: "string"
    title: "RecoverBandwidthRequest"
    example:
      ip: "ip"
      uuid: "uuid"
  RenameNetworkInterfaceRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "network-interface"
        description: "Name of network interface"
    title: "RenameNetworkInterfaceRequest"
    description: "Rename Network Interface Request"
    example:
      name: "network-interface"
  RenameServerRequest:
    type: "object"
    required:
    - "newName"
    - "serverId"
    properties:
      newName:
        type: "string"
        example: "server01"
        description: "New name of server"
      serverId:
        type: "string"
        example: "ins-a332cc50-8e24-4a45-ad9f-4136c7358503"
        description: "Id of server"
    title: "RenameServerRequest"
    description: "Rename Server Request"
    example:
      newName: "server01"
      serverId: "ins-a332cc50-8e24-4a45-ad9f-4136c7358503"
  RenewBandwidthRequest:
    type: "object"
    properties:
      ip:
        type: "string"
      uuid:
        type: "string"
    title: "RenewBandwidthRequest"
    example:
      ip: "ip"
      uuid: "uuid"
  ReorderPoliciesRequest:
    type: "object"
    properties:
      listenerId:
        type: "string"
        description: "Listener's id of the policies"
      policies:
        type: "array"
        description: "List of policies to reorder"
        items:
          $ref: "#/definitions/ReorderPolicyRequest"
    title: "ReorderPoliciesRequest"
    example:
      listenerId: "listenerId"
      policies:
      - policyId: "policyId"
        position: 0
      - policyId: "policyId"
        position: 0
  ReorderPolicyRequest:
    type: "object"
    properties:
      policyId:
        type: "string"
        description: "Policy's id to reorder"
      position:
        type: "integer"
        format: "int64"
        description: "New position of the policy"
    title: "ReorderPolicyRequest"
    example:
      policyId: "policyId"
      position: 0
  ResizeServerRequest:
    type: "object"
    required:
    - "flavorId"
    - "serverId"
    properties:
      flavorId:
        type: "string"
        example: "flav-c41b827e-730a-475f-b181-c0d1c7acc6d4"
        description: "Id of flavor"
      serverId:
        type: "string"
        example: "ins-a332cc50-8e24-4a45-ad9f-4136c7358503"
        description: "Id of server"
    title: "ResizeServerRequest"
    description: "Resize Server Request"
    example:
      flavorId: "flav-c41b827e-730a-475f-b181-c0d1c7acc6d4"
      serverId: "ins-a332cc50-8e24-4a45-ad9f-4136c7358503"
  ResizeVolumeRequest:
    type: "object"
    required:
    - "newSize"
    - "newVolumeTypeId"
    properties:
      newSize:
        type: "integer"
        format: "int32"
        example: 20
        description: "New size of volume"
      newVolumeTypeId:
        type: "string"
        example: "vtype-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
        description: "Id of new volume type"
    title: "ResizeVolumeRequest"
    description: "Resize Volume Request"
    example:
      newSize: 20
      newVolumeTypeId: "vtype-6d30737c-08aa-41f8-8bb1-d486c94ccf69"
  ResourceIp:
    type: "object"
    properties:
      ip:
        type: "string"
      resourceType:
        type: "string"
    title: "ResourceIp"
  RootDiskLimit:
    type: "object"
    properties:
      maxIOPS:
        type: "integer"
        format: "int32"
      maxSize:
        type: "integer"
        format: "int32"
      minSize:
        type: "integer"
        format: "int32"
    title: "RootDiskLimit"
  RouteModel:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      destination:
        type: "string"
      routeTableUuid:
        type: "string"
      routingType:
        type: "string"
      status:
        type: "string"
      targetUuid:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "RouteModel"
  RouteTableModel:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      name:
        type: "string"
      routes:
        type: "array"
        items:
          $ref: "#/definitions/RouteModel"
      status:
        type: "string"
      subnets:
        type: "array"
        items:
          $ref: "#/definitions/Subnet"
      system:
        type: "boolean"
      uuid:
        type: "string"
      vpcUuid:
        type: "string"
    title: "RouteTableModel"
  RouteTableResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      routeTable:
        $ref: "#/definitions/RouteTableModel"
      success:
        type: "boolean"
    title: "RouteTableResponse"
  RouteTableUpdateRouteRequest:
    type: "object"
    properties:
      routes:
        type: "array"
        description: "The updated routes list of route-table"
        items:
          $ref: "#/definitions/UpdatedRoute"
    title: "RouteTableUpdateRouteRequest"
    example:
      routes:
      - destination: "destination"
        type: "type"
        targetUuid: "targetUuid"
      - destination: "destination"
        type: "type"
        targetUuid: "targetUuid"
  RouteTableUpdateSubnetRequest:
    type: "object"
    properties:
      subnets:
        type: "array"
        description: "The updated subnet uuid list of route-table"
        items:
          type: "string"
    title: "RouteTableUpdateSubnetRequest"
    example:
      subnets:
      - "subnets"
      - "subnets"
  SSHKey:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      id:
        type: "string"
      name:
        type: "string"
      privateKey:
        type: "string"
      pubKey:
        type: "string"
      status:
        type: "string"
    title: "SSHKey"
  SSHKeyDto:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      id:
        type: "string"
      name:
        type: "string"
      privateKey:
        type: "string"
      pubKey:
        type: "string"
      status:
        type: "string"
    title: "SSHKeyDto"
  SSHKeyResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      sshKeys:
        type: "array"
        items:
          $ref: "#/definitions/SSHKey"
      success:
        type: "boolean"
    title: "SSHKeyResponse"
  SecGroupRuleDetail:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      direction:
        type: "string"
      etherType:
        type: "string"
      id:
        type: "string"
      portRangeMax:
        type: "integer"
        format: "int32"
      portRangeMin:
        type: "integer"
        format: "int32"
      protocol:
        type: "string"
      remoteGroupId:
        type: "string"
      remoteIpPrefix:
        type: "string"
      secGroupName:
        type: "string"
      status:
        type: "string"
    title: "SecGroupRuleDetail"
  Secgroup:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      id:
        type: "string"
      name:
        type: "string"
      status:
        type: "string"
      system:
        type: "boolean"
    title: "Secgroup"
  SecgroupDto:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      id:
        type: "string"
      name:
        type: "string"
      status:
        type: "string"
      system:
        type: "boolean"
    title: "SecgroupDto"
  SecgroupEntity:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      isSystem:
        type: "boolean"
      projectUuid:
        type: "string"
      secgroupId:
        type: "integer"
        format: "int32"
      secgroupName:
        type: "string"
      status:
        type: "string"
      type:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "SecgroupEntity"
  SecgroupResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      secgroups:
        type: "array"
        items:
          $ref: "#/definitions/Secgroup"
      success:
        type: "boolean"
    title: "SecgroupResponse"
  SecgroupRule:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      direction:
        type: "string"
      displayCreatedAt:
        type: "string"
      etherType:
        type: "string"
      id:
        type: "string"
      portRangeMax:
        type: "integer"
        format: "int32"
      portRangeMin:
        type: "integer"
        format: "int32"
      protocol:
        type: "string"
      remoteGroupId:
        type: "string"
      remoteIpPrefix:
        type: "string"
      status:
        type: "string"
    title: "SecgroupRule"
  SecgroupRuleEntity:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      direction:
        type: "string"
      etherType:
        type: "string"
      id:
        type: "integer"
        format: "int32"
      isSystem:
        type: "boolean"
      portRangeMax:
        type: "integer"
        format: "int32"
      portRangeMin:
        type: "integer"
        format: "int32"
      protocol:
        type: "string"
      remoteIpPrefix:
        type: "string"
      ruleId:
        type: "integer"
        format: "int32"
      secgroupUuid:
        type: "string"
      status:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "SecgroupRuleEntity"
  SecgroupRuleResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      secgroupRules:
        type: "array"
        items:
          $ref: "#/definitions/SecgroupRule"
      success:
        type: "boolean"
    title: "SecgroupRuleResponse"
  SecgroupruleDto:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      direction:
        type: "string"
      etherType:
        type: "string"
      id:
        type: "string"
      portRangeMax:
        type: "integer"
        format: "int32"
      portRangeMin:
        type: "integer"
        format: "int32"
      protocol:
        type: "string"
      remoteGroupId:
        type: "string"
      remoteIpPrefix:
        type: "string"
      status:
        type: "string"
    title: "SecgroupruleDto"
  SecurityGroupRulesSampleEntity:
    type: "object"
    properties:
      direction:
        type: "string"
      fromPort:
        type: "integer"
        format: "int32"
      id:
        type: "integer"
        format: "int32"
      ipProtocol:
        type: "string"
      name:
        type: "string"
      toPort:
        type: "integer"
        format: "int32"
    title: "SecurityGroupRulesSampleEntity"
  Server:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      encryptionVolume:
        type: "boolean"
      externalInterfaces:
        type: "array"
        items:
          $ref: "#/definitions/InterfaceNetworkInterface"
      flavor:
        $ref: "#/definitions/Flavor"
      image:
        $ref: "#/definitions/OSImage"
      internalInterfaces:
        type: "array"
        items:
          $ref: "#/definitions/InterfaceNetworkInterface"
      licence:
        type: "boolean"
      name:
        type: "string"
      secGroups:
        type: "array"
        items:
          $ref: "#/definitions/ServerSecGroup"
      serverGroupId:
        type: "string"
      serverGroupName:
        type: "string"
      sshKeyName:
        type: "string"
      status:
        type: "string"
      uuid:
        type: "string"
    title: "Server"
  ServerAction:
    type: "object"
    properties:
      action:
        type: "string"
      startTime:
        type: "string"
        format: "date-time"
      userAction:
        type: "string"
    title: "ServerAction"
  ServerGroup:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      name:
        type: "string"
      policyId:
        type: "string"
      projectId:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "ServerGroup"
  ServerGroupDetail:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      name:
        type: "string"
      policyId:
        type: "string"
      policyName:
        type: "string"
      serverGroupId:
        type: "integer"
        format: "int32"
      servers:
        type: "array"
        items:
          $ref: "#/definitions/Server"
      uuid:
        type: "string"
    title: "ServerGroupDetail"
  ServerGroupDto:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      name:
        type: "string"
      policyId:
        type: "string"
      serverGroupId:
        type: "integer"
        format: "int32"
      uuid:
        type: "string"
    title: "ServerGroupDto"
  ServerGroupPolicy:
    type: "object"
    properties:
      description:
        type: "string"
      descriptionVi:
        type: "string"
      name:
        type: "string"
      status:
        type: "string"
      uuid:
        type: "string"
    title: "ServerGroupPolicy"
  ServerGroupPolicyResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      serverGroupPolicies:
        type: "array"
        items:
          $ref: "#/definitions/ServerGroupPolicy"
      success:
        type: "boolean"
    title: "ServerGroupPolicyResponse"
  ServerGroupResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      serverGroups:
        type: "array"
        items:
          $ref: "#/definitions/ServerGroup"
      success:
        type: "boolean"
    title: "ServerGroupResponse"
  ServerLimit:
    type: "object"
    properties:
      dataDisk:
        $ref: "#/definitions/DataDiskLimit"
      rootDisk:
        $ref: "#/definitions/RootDiskLimit"
    title: "ServerLimit"
  ServerNetworkInterfaceDetail:
    type: "object"
    properties:
      externalInterfaces:
        type: "array"
        items:
          $ref: "#/definitions/InterfaceNetworkInterface"
      internalInterfaces:
        type: "array"
        items:
          $ref: "#/definitions/InterfaceNetworkInterface"
    title: "ServerNetworkInterfaceDetail"
  ServerOfSecgroupDto:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      name:
        type: "string"
      status:
        type: "string"
      uuid:
        type: "string"
    title: "ServerOfSecgroupDto"
  ServerResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      servers:
        type: "array"
        items:
          $ref: "#/definitions/Server"
      success:
        type: "boolean"
    title: "ServerResponse"
  ServerSecGroup:
    type: "object"
    properties:
      name:
        type: "string"
      uuid:
        type: "string"
    title: "ServerSecGroup"
  ServerSecGroupDetail:
    type: "object"
    properties:
      inbounds:
        type: "array"
        items:
          $ref: "#/definitions/SecGroupRuleDetail"
      outbounds:
        type: "array"
        items:
          $ref: "#/definitions/SecGroupRuleDetail"
    title: "ServerSecGroupDetail"
  SimpleServer:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      email:
        type: "string"
      flavorId:
        type: "string"
      imageId:
        type: "string"
      internalInterfaces:
        type: "array"
        items:
          $ref: "#/definitions/InterfaceNetworkInterface"
      licence:
        type: "boolean"
      name:
        type: "string"
      networkId:
        type: "string"
      projectId:
        type: "string"
      status:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "SimpleServer"
  SimpleVolume:
    type: "object"
    properties:
      bootIndex:
        type: "integer"
        format: "int32"
      bootable:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date-time"
      name:
        type: "string"
      projectId:
        type: "string"
      serverId:
        type: "string"
      size:
        type: "integer"
        format: "int32"
      status:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
      volumeTypeId:
        type: "string"
    title: "SimpleVolume"
  Subnet:
    type: "object"
    properties:
      cidr:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      displayCreatedAt:
        type: "string"
      interfaceAclPolicyId:
        type: "string"
      name:
        type: "string"
      networkId:
        type: "string"
      routeTableId:
        type: "string"
      status:
        type: "string"
      subnetId:
        type: "integer"
        format: "int32"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "Subnet"
  SubnetDto:
    type: "object"
    properties:
      cidr:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      interfaceAclPolicyUuid:
        type: "string"
      name:
        type: "string"
      networkUuid:
        type: "string"
      routeTableUuid:
        type: "string"
      status:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
    title: "SubnetDto"
  SubnetResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      subnets:
        type: "array"
        items:
          $ref: "#/definitions/Subnet"
      success:
        type: "boolean"
    title: "SubnetResponse"
  Timestamp:
    type: "object"
    properties:
      date:
        type: "integer"
        format: "int32"
      day:
        type: "integer"
        format: "int32"
      hours:
        type: "integer"
        format: "int32"
      minutes:
        type: "integer"
        format: "int32"
      month:
        type: "integer"
        format: "int32"
      nanos:
        type: "integer"
        format: "int32"
      seconds:
        type: "integer"
        format: "int32"
      time:
        type: "integer"
        format: "int64"
      timezoneOffset:
        type: "integer"
        format: "int32"
      year:
        type: "integer"
        format: "int32"
    title: "Timestamp"
  TypeItemCondition:
    type: "object"
    properties:
      aggregateInstanceExtraSpecsCpuNcore:
        type: "string"
      aggregateInstanceExtraSpecsMemory:
        type: "string"
      shared:
        type: "boolean"
    title: "TypeItemCondition"
  TypesItem:
    type: "object"
    properties:
      condition:
        $ref: "#/definitions/TypeItemCondition"
      key:
        type: "string"
      value:
        type: "string"
    title: "TypesItem"
  UpdateHealthMonitorRequest:
    type: "object"
    required:
    - "healthyThreshold"
    - "interval"
    - "timeout"
    - "unhealthyThreshold"
    properties:
      healthCheckMethod:
        type: "string"
        example: "GET"
        description: "Health check method for the HTTP protocol."
      healthCheckPath:
        type: "string"
        example: "/"
        description: "Health check path for the HTTP protocol."
      healthyThreshold:
        type: "integer"
        format: "int64"
        example: 3
        description: "Healthy threshold. The value must be in range from 2 to 10."
      interval:
        type: "integer"
        format: "int64"
        example: 30
        description: "Health check interval. The value must be from 5 to 3600 seconds."
      successCode:
        type: "string"
        example: "200"
        description: "Health check success code for HTTP health check protocol."
      timeout:
        type: "integer"
        format: "int64"
        example: 5
        description: "Timeout of health check. The value must be from 2 to 120 seconds"
      unhealthyThreshold:
        type: "integer"
        format: "int64"
        example: 3
        description: "Unhealthy threshold. The value must be in range from 2 to 10."
    title: "UpdateHealthMonitorRequest"
    example:
      healthCheckPath: "/"
      unhealthyThreshold: 3
      healthCheckMethod: "GET"
      interval: 30
      healthyThreshold: 3
      timeout: 5
      successCode: "200"
  UpdateL7PolicyRequest:
    type: "object"
    required:
    - "action"
    - "compareType"
    - "l7policyId"
    - "type"
    properties:
      action:
        type: "string"
        description: "Action. This indicates how the listener will route traffic.\
          \ The value can be REDIRECT_TO_POOL or REDIRECT_TO_URL."
      compareType:
        type: "string"
        description: "Compare operation. The value can be CONTAINS or EQUAL_TO"
      keepQueryString:
        type: "boolean"
        description: "Keep the query string or not."
      l7policyId:
        type: "string"
        description: "Policy's id to be updated."
      position:
        type: "integer"
        format: "int64"
        description: "Position of the policy"
      redirectHttpCode:
        type: "integer"
        format: "int32"
        description: "Redirect HTTP code for redirecting to other URL."
      redirectPoolId:
        type: "string"
        description: "Pool for forwarding."
      redirectUrl:
        type: "string"
        description: "URL for forwarding."
      type:
        type: "string"
        description: "Which attribute to compare. The value can be PATH or HOST_NAME"
      value:
        type: "string"
        description: "The value to compare with attribute."
    title: "UpdateL7PolicyRequest"
    example:
      l7policyId: "l7policyId"
      compareType: "compareType"
      redirectUrl: "redirectUrl"
      redirectPoolId: "redirectPoolId"
      redirectHttpCode: 6
      action: "action"
      keepQueryString: true
      position: 0
      type: "type"
      value: "value"
  UpdateListenerRequest:
    type: "object"
    required:
    - "allowedCidrs"
    - "listenerId"
    - "timeoutClient"
    - "timeoutConnection"
    - "timeoutMember"
    properties:
      allowedCidrs:
        type: "string"
        example: "0.0.0.0/0"
        description: "Allowed cidr."
      clientCertificate:
        type: "string"
        description: "Client certificate"
      defaultCertificateAuthority:
        type: "string"
        description: "Default certificate authority."
      defaultPoolId:
        type: "string"
        description: "Id of the pool that this listener will forward to."
      headers:
        type: "array"
        description: "Headers"
        items:
          type: "string"
      listenerId:
        type: "string"
        description: "Id of the listener to update"
      timeoutClient:
        type: "integer"
        format: "int32"
        example: 50
        description: "Idle timeout of client. The value can be in range from 1 to\
          \ 3600 seconds"
      timeoutConnection:
        type: "integer"
        format: "int32"
        example: 5
        description: "Idle timeout of connection. The value can be in range from 1\
          \ to 3600 seconds"
      timeoutMember:
        type: "integer"
        format: "int32"
        example: 50
        description: "Idle timeout of member. The value can be in range from 1 to\
          \ 3600 seconds"
    title: "UpdateListenerRequest"
    example:
      headers:
      - "headers"
      - "headers"
      listenerId: "listenerId"
      clientCertificate: "clientCertificate"
      defaultCertificateAuthority: "defaultCertificateAuthority"
      timeoutClient: 50
      defaultPoolId: "defaultPoolId"
      allowedCidrs: "0.0.0.0/0"
      timeoutConnection: 5
      timeoutMember: 50
  UpdateMembersRequest:
    type: "object"
    properties:
      members:
        type: "array"
        description: "List of members of the pool."
        items:
          $ref: "#/definitions/CreateMemberRequest"
    title: "UpdateMembersRequest"
    example:
      members:
      - subnetId: "subnetId"
        backup: false
        port: 80
        ipAddress: "192.168.0.1"
        name: "name"
        weight: 1
        monitorPort: 1000
      - subnetId: "subnetId"
        backup: false
        port: 80
        ipAddress: "192.168.0.1"
        name: "name"
        weight: 1
        monitorPort: 1000
  UpdateNetworkAclRulesRequest:
    type: "object"
    properties:
      detailAclRuleList:
        type: "array"
        items:
          $ref: "#/definitions/UpdatedAclPolicyRule"
    title: "UpdateNetworkAclRulesRequest"
    example:
      detailAclRuleList:
      - protocol: "protocol"
        system: true
        port: "port"
        interfaceAclPolicyUuid: "interfaceAclPolicyUuid"
        action: "action"
        seqNumber: 0
        source: "source"
        type: "type"
      - protocol: "protocol"
        system: true
        port: "port"
        interfaceAclPolicyUuid: "interfaceAclPolicyUuid"
        action: "action"
        seqNumber: 0
        source: "source"
        type: "type"
  UpdateNetworkAclSubnetsRequest:
    type: "object"
    properties:
      subnetUuids:
        type: "array"
        description: "The updated subnets uuid list of network-acl"
        items:
          type: "string"
    title: "UpdateNetworkAclSubnetsRequest"
    example:
      subnetUuids:
      - "subnetUuids"
      - "subnetUuids"
  UpdateNetworkRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "Network_01"
        description: "Name of the Network"
    title: "UpdateNetworkRequest"
    description: "Update Network Request"
    example:
      name: "Network_01"
  UpdatePoolRequest:
    type: "object"
    required:
    - "algorithm"
    - "poolId"
    properties:
      algorithm:
        type: "string"
        example: "ROUND_ROBIN"
        description: "Algorithm of the pool. The algorithm can be \"ROUND_ROBIN\"\
          \ or \"LEAST_CONNECTIONS\" or \"SOURCE_IP\""
      healthMonitor:
        description: "Update request for health monitor"
        $ref: "#/definitions/UpdateHealthMonitorRequest"
      poolId:
        type: "string"
        description: "Id of the pool to update."
      stickiness:
        type: "boolean"
        example: true
        description: "Enable sticky sessions."
    title: "UpdatePoolRequest"
    example:
      healthMonitor:
        healthCheckPath: "/"
        unhealthyThreshold: 3
        healthCheckMethod: "GET"
        interval: 30
        healthyThreshold: 3
        timeout: 5
        successCode: "200"
      stickiness: true
      poolId: "poolId"
      algorithm: "ROUND_ROBIN"
  UpdateSecurityGroupRuleRequest:
    type: "object"
    properties:
      description:
        type: "string"
        description: "Description for security group rule."
    title: "UpdateSecurityGroupRuleRequest"
    example:
      description: "description"
  UpdateServerGroupRequest:
    type: "object"
    required:
    - "serverGroupId"
    properties:
      description:
        type: "string"
        example: "This is my server group"
        description: "Description of server group"
      serverGroupId:
        type: "string"
        example: "Group-01"
        description: "Id of the server group"
    title: "UpdateServerGroupRequest"
    example:
      serverGroupId: "Group-01"
      description: "This is my server group"
  UpdateServerGroupRequestV2:
    type: "object"
    required:
    - "name"
    - "serverGroupId"
    properties:
      description:
        type: "string"
        description: "description for  Server Group."
      name:
        type: "string"
        example: "Server Group_01"
        description: "Name of the Server Group"
      serverGroupId:
        type: "string"
        example: "Group-01"
        description: "Id of the server group"
    title: "UpdateServerGroupRequestV2"
    example:
      name: "Server Group_01"
      serverGroupId: "Group-01"
      description: "description"
  UpdateServerRequest:
    type: "object"
    required:
    - "serverId"
    properties:
      serverId:
        type: "string"
        example: "ins-a332cc50-8e24-4a45-ad9f-4136c7358503"
        description: "Id of server"
    title: "UpdateServerRequest"
    description: "Update Server Request"
    example:
      serverId: "ins-a332cc50-8e24-4a45-ad9f-4136c7358503"
  UpdateSubnetRequest:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "Subnet_01"
        description: "Name of the subnet"
    title: "UpdateSubnetRequest"
    description: "Update Network Request"
    example:
      name: "Subnet_01"
  UpdateTaskStatusRequest:
    type: "object"
    properties:
      data:
        $ref: "#/definitions/VpcInfo"
      status:
        type: "string"
      taskID:
        type: "string"
    title: "UpdateTaskStatusRequest"
    example:
      data:
        public_ip: "public_ip"
        volumes_attached: "volumes_attached"
        vmUuid: "vmUuid"
      taskID: "taskID"
      status: "status"
  UpdateVirtualIpAddressRequest:
    type: "object"
    properties:
      description:
        type: "string"
        description: "description for Virtual IP Address."
      name:
        type: "string"
    title: "UpdateVirtualIpAddressRequest"
    example:
      name: "name"
      description: "description"
  UpdatedAclPolicyRule:
    type: "object"
    properties:
      action:
        type: "string"
      interfaceAclPolicyUuid:
        type: "string"
      port:
        type: "string"
      protocol:
        type: "string"
      seqNumber:
        type: "integer"
        format: "int32"
      source:
        type: "string"
      system:
        type: "boolean"
      type:
        type: "string"
    title: "UpdatedAclPolicyRule"
    example:
      protocol: "protocol"
      system: true
      port: "port"
      interfaceAclPolicyUuid: "interfaceAclPolicyUuid"
      action: "action"
      seqNumber: 0
      source: "source"
      type: "type"
  UpdatedRoute:
    type: "object"
    properties:
      destination:
        type: "string"
      targetUuid:
        type: "string"
      type:
        type: "string"
    title: "UpdatedRoute"
    example:
      destination: "destination"
      type: "type"
      targetUuid: "targetUuid"
  UserImage:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      imageSize:
        type: "number"
        format: "float"
      minDisk:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      projectId:
        type: "string"
      status:
        type: "string"
      uuid:
        type: "string"
    title: "UserImage"
  UserService:
    type: "object"
    properties:
      artifactId:
        type: "string"
      artifactName:
        type: "string"
      artifactType:
        type: "string"
      createdTime:
        type: "integer"
        format: "int64"
      createdTimeFmt:
        type: "string"
      endBillingTime:
        type: "integer"
        format: "int64"
      endTimeFmt:
        type: "string"
      isPoc:
        type: "boolean"
      monthlyCost:
        type: "number"
        format: "double"
      startBillingTime:
        type: "integer"
        format: "int64"
      startTimeFmt:
        type: "string"
      trial:
        type: "boolean"
      userServiceId:
        type: "integer"
        format: "int32"
    title: "UserService"
  VirtualIpAddressDto:
    type: "object"
    properties:
      addressPairIps:
        type: "array"
        items:
          type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      description:
        type: "string"
      ipAddress:
        type: "string"
      name:
        type: "string"
      networkCIDR:
        type: "string"
      networkName:
        type: "string"
      networkUuid:
        type: "string"
      subnetCIDR:
        type: "string"
      subnetName:
        type: "string"
      subnetUuid:
        type: "string"
      uuid:
        type: "string"
    title: "VirtualIpAddressDto"
  VirtualIpAddressNetworkEntity:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      deletedAt:
        type: "string"
        format: "date-time"
      id:
        type: "integer"
        format: "int64"
      netInterfaceUuid:
        type: "string"
      projectUuid:
        type: "string"
      uuid:
        type: "string"
      vipUuid:
        type: "string"
    title: "VirtualIpAddressNetworkEntity"
  Volume:
    type: "object"
    properties:
      bootIndex:
        type: "integer"
        format: "int32"
      bootable:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date-time"
      encryptionType:
        type: "string"
      iops:
        type: "string"
      multiAttach:
        type: "boolean"
      name:
        type: "string"
      projectId:
        type: "string"
      serverId:
        type: "string"
      serverIdList:
        type: "array"
        items:
          type: "string"
      size:
        type: "integer"
        format: "int32"
      status:
        type: "string"
      updatedAt:
        type: "string"
        format: "date-time"
      uuid:
        type: "string"
      volumeTypeId:
        type: "string"
      volumeTypeZoneName:
        type: "string"
    title: "Volume"
  VolumeAction:
    type: "object"
    properties:
      iops:
        type: "integer"
        format: "int32"
      size:
        type: "integer"
        format: "int32"
      start:
        type: "string"
        format: "date-time"
      type:
        type: "string"
    title: "VolumeAction"
  VolumeResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      success:
        type: "boolean"
      volumes:
        type: "array"
        items:
          $ref: "#/definitions/Volume"
    title: "VolumeResponse"
  VolumeType:
    type: "object"
    properties:
      id:
        type: "string"
      iops:
        type: "integer"
        format: "int32"
      maxSize:
        type: "integer"
        format: "int32"
      minSize:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      throughPut:
        type: "integer"
        format: "int32"
      zoneId:
        type: "string"
    title: "VolumeType"
  VolumeTypeResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      success:
        type: "boolean"
      volumeTypes:
        type: "array"
        items:
          $ref: "#/definitions/VolumeType"
    title: "VolumeTypeResponse"
  VolumeTypeZone:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
    title: "VolumeTypeZone"
  VolumeTypeZoneResponse:
    type: "object"
    properties:
      errorCode:
        type: "integer"
        format: "int32"
      errorMsg:
        type: "string"
      extra:
        type: "object"
        properties: {}
      success:
        type: "boolean"
      volumeTypeZones:
        type: "array"
        items:
          $ref: "#/definitions/VolumeTypeZone"
    title: "VolumeTypeZoneResponse"
  VpcInfo:
    type: "object"
    properties:
      public_ip:
        type: "string"
      vmUuid:
        type: "string"
      volumes_attached:
        type: "string"
    title: "VpcInfo"
    example:
      public_ip: "public_ip"
      volumes_attached: "volumes_attached"
      vmUuid: "vmUuid"
  WanIpDto:
    type: "object"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
      fixedIp:
        type: "string"
      ip:
        type: "string"
      networkInterfaceId:
        type: "string"
      status:
        type: "string"
      uuid:
        type: "string"
    title: "WanIpDto"
